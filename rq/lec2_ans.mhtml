From: <Saved by Blink>
Snapshot-Content-Location: https://6858.csail.mit.edu/lec-answers/2
Subject: Answers for lecture 2 - 6.858
Date: Wed, 20 Mar 2018 22:38:31 -0000
MIME-Version: 1.0
Content-Type: multipart/related;
	type="text/html";
	boundary="----MultipartBoundary--9M9qhJBk7922SllJpAeeJMD8sYhFJGyyFUiuc6T0sd----"

------MultipartBoundary--9M9qhJBk7922SllJpAeeJMD8sYhFJGyyFUiuc6T0sd----
Content-Type: text/html
Content-ID: <frame-32818-1e06f255-ae54-42fd-81cb-c5ae624c0bc2@mhtml.blink>
Content-Transfer-Encoding: quoted-printable
Content-Location: https://6858.csail.mit.edu/lec-answers/2

<!DOCTYPE html><html><head><meta http-equiv=3D"Content-Type" content=3D"tex=
t/html; charset=3DUTF-8">
  <title>Answers for lecture 2 - 6.858</title>
 =20
  <style type=3D"text/css">
form {
  display: inline;   =20
}
   =20
body {
  color: #2E3436;
  font-family: "Georgia","Liberation Serif","Droid Serif","Helvetica","Bits=
tream Vera Serif","Serif";
  font-size: 12pt;
  line-height: 1.5em;
  margin: 0px;
}

#container {
  display: block;
  height: 100%;
  margin-left: 100px;
  margin-top: 50px;
  margin-right: auto;
  min-height: 100%;
  overflow: inherit;
}

.dlsubmit {
}

h1 {
  font-size: 30pt;
  line-height: 1.5em;
  text-align: left;
  margin-left: -40px;
}

h2 {
  color: #8BB827;
  font-size: 20pt;
  line-height: 1.5em;
  text-align: left;
  margin-left: -20px;
}
   =20
a {
  color: #666666;
  text-decoration: none;
}

.btn {
  width: 150px;
}

.textbox {
  background: none;
}

pre.student-text {
  white-space: pre-wrap;
}

#shell {
  border-left: 5px solid #DDDDDD;
  padding-left: 10px;
  margin-left: 50px;
  margin-top: 25px;
}

#subguide {
  margin-left: 10px;
  margin-top: 25px;
  margin-bottom: 50px;
}

#fileform {
  background: none;
  position: relative;
  box-shadow: none;
}

/* a fancy submit style */
input {
  -moz-border-bottom-colors: none;
  -moz-border-left-colors: none;
  -moz-border-right-colors: none;
  -moz-border-top-colors: none;
  background: -moz-linear-gradient(center top , #FFFFFF, #E9E9E9) repeat sc=
roll 0 0 padding-box transparent;
  border-color: #DEDEDE #BBBBBB #BFBFBF #DEDEDE;
  border-image: none;
  border-radius: 11px 11px 11px 11px;
  border-style: solid;
  border-width: 1px;
  box-shadow: 0 1px 1px rgba(0, 0, 0, 0.1);
  color: #464646;
  cursor: pointer;
  display: inline-block;
  font-family: "Lucida Grande",Tahoma,Arial,sans-serif;
  font-size: 100%;
  line-height: 130%;
  margin: 0 0.7em 0 0;
  padding: 5px 10px 6px;
  text-decoration: none;
}
   =20
a:hover {
  text-decoration: underline;
}

table {
  background: none repeat scroll 0 0 #FFFFFF;
  border-collapse: collapse;
  margin: 10px;
  text-align: left;
  width: 1000px;
}
   =20
th {
  border-bottom: 2px solid #6678B1;
  font-weight: bold;
  padding: 10px 8px;
}

.spanned {
  border-bottom: none;
  text-align: center;
  padding: 0;
}
   =20
td {
  padding: 9px 3px 0;
}

#header {
  background-color: #EEEEEE;
  height: 30px;
}

#menu {
  padding-left: 10px;
  font-size: 20px;
  display: inline;
}

#menu a {
  margin-left: 5px;
  margin-right: 5px;
}
  </style>
 =20
</head>
<body>
  <div id=3D"header">
    <div id=3D"menu">
      <a href=3D"http://pdos.csail.mit.edu/6.858">6.858</a>

     =20
      | <a href=3D"https://6858.csail.mit.edu/reset">New api-key</a>
      | <a href=3D"https://6858.csail.mit.edu/logout">Logout</a>
     =20
     =20
    </div>
   =20
  </div>
 =20
  <div id=3D"container">
 =20
<h1> 6.858: Answers for lecture 2 </h1>

<ul>

<li><pre class=3D"student-text">- an attack where an employee gets inside a=
 datacenter and compromises security
- hardware compromised due to outsider knowledge of the chips
- attacks due to out of date software
- defending against a single service being compromised and being used to co=
mpromise other services as well
- scheduled for deletion allows for recovery of data in the case of acciden=
tal deletions
- load balancing prevents against DoS attacks
- defending against phishing attacks against employees to protect employee =
credentials
- intrusion detection
- </pre></li>

<li><pre class=3D"student-text">- someone physically breaking into a Google=
 facility and stealing a hard drive with important data, or just completely=
 destroying a bunch of things

- a vendor secretly designing a backdoor into their chips, which someone ca=
n then exploit

- someone impersonating a Google server machine and gaining access to stuff=
 they shouldn=E2=80=99t have access to

- someone impersonating a Google service and gaining access to stuff they s=
houldn=E2=80=99t have access to

- someone impersonating a Google engineer and gaining access to stuff they =
shouldn=E2=80=99t have access to

- someone sniffing network traffic or compromising a network device

- someone (besides the user, like another service without permission of the=
 user or a Google employee) accessing private user data

- someone getting their hands on a physical disk and managing to restore da=
ta from it

- someone hacking into another person's account and deleting everything per=
manently

- a DoS attack...

- phishing

- someone who discovered a vulnerability keeping quiet or exploiting it (di=
sincentivizing them from doing these things through $$)

- someone gaining access to a Google employee's machine/credentials/whatnot=
 and using them to wreak havoc

- a Google employee with access to lots of things wreaking havoc

- Google cloud users being evil and trying to mess with other VMs or other =
Google services through their VM

</pre></li>

<li><pre class=3D"student-text">Google is trying to prevent these potential=
 attacks:

Secure Low Level Infrastructure
1. Attackers trying to physically destroy or access the hardware in the dat=
a centers.
2. Venerabilities and backdoors that companies or manufacturers could inclu=
de in their hardware that could be manipulated to have access to Google's i=
nformation.
3. An attack in which a different software stack is loaded on the hardware =
to access that data.

Secure Service Deployment
4. Services that are run on Google's platform maliciously accessing and mod=
ifying source code.
5. Unwanted access to services.
6. An attack in which the network has been tapped.
7. A service from misusing the breadth of the permissions it has to interac=
t with other services.

Secure Data Storage
8. Threats of malicious disk firmware that could allow for malicious access=
 or changes to the data.
9. Attacks of unwanted data deletions (accidental or intentional).

Secure Internet Communication
10. Denial of Service Attacks
11. Attackers trying to use accounts that are not their own.

Operational security
12. Any sort of 0-day exploits or internet security vulnerabilities.
13. Phishing attempts to get employee credentials.
14. Any sort of malicious accessing from employees/insiders.
</pre></li>

<li><pre class=3D"student-text">Security of Low Level Infrastructure
	Google is clearly worried about physical attacks on its data center, inclu=
ding someone planting their own device in the data center. The custom chips=
 that allow Google machines to identify one another by their hardware is a =
measure to protect against access by a third-party machine.

Secure Service Deployment
	Google is worried about malicious code running on its servers, and they se=
em particularly concerned with preventing malicious code from affecting oth=
er code running in the data center. Its own source code, including previous=
 versions, is stored where it can be regularly audited, and there are sever=
al layers of authentication for inter-service communication. Applications a=
re also sandboxed to prevent them from interacting with other services in u=
nauthorized ways, and processes crucial to the data center management are r=
un on dedicated machines for an added layer of security through separation.=
=20

Secure Data Storage
	Google is concerned with long-term data privacy and integrity. The multi-p=
hase deletion process is to protect against unauthorized or mistaken deleti=
on requests.

Secure Internet Communication
	Google is worried about denial of service attacks. By having monitors for =
such attacks and an incredible capacity to scale up a service, they are abl=
e to absorb most DoS attacks.

Operation Security
	Google is worried about an insider, or an employee, intentionally or unint=
entionally creating or triggering a security risk.=20
</pre></li>

<li><pre class=3D"student-text">Security of Physical Premises
- Adversaries wanting to physically attack data centers

Hardware Design and Provenance
- Protect against hardware companies that Google buys hardware from, so tha=
t no exploits can be kept inside the hardware

Secure Boot Stack and Machine Identity
- Protects against impostor machines with incorrect software configurations

Service Identity, Integrity, and Isolation
- Protects services from other services running on the same machine

Inter-Service Access Management
- Protects services from other services

Encryption of Inter-Service Communication
- Protects against adversaries listening to inter-service communication to =
use as information for potential attacks

Access Management of End User Data
- Protects against users from reading other users' data

Encryption at Rest
- Protects against malicious disk firmware

Deletion of Data
- Protects against attacks that may delete large amounts of data

Google Front End Service
- Protects services from attacks that services may normally face without th=
e use of GFE

Denial of Service (DoS) Protection
- Protects against DoS

User Authentication
- Protects against adversaries posing as real users

Safe Software Development
- Protects Google's software from being at risk for attacks in general
- Protects Google's software from being compromised by employees

Keeping Employee Devices and Credentials Safe
- Protects employees' information from being accessed
- Protects Google from an outsider posing as an insider attack

Intrusion Detection
- Provides a way to counter attacks that are in progress</pre></li>

<li><pre class=3D"student-text"># Reading Assignment L2
# Rayden Y. Chia

Secure Low Level Infrastructure:
	Security of Physical Premises
		-unauthorized personnel entering the datacenter
	Hardware Design and Provenance
		-rogue device firmware=20
	Secure Boot Stack and Machine Identity
		-malicious firmware

Secure Service Deployment:
	Service Identity, Integrity, and Isolation
		-malicious modifications to source code
	Inter-Service Access Management
		-poor separation of duties (e.g. manager approving itself)
	Encryption of Inter-Service Communication
		-passive sniffing of unencrypted data-in-transit
	Access Management of End User Data
		-full compromise of data when one service is compromised (prevented by po=
licy enforcement and validation engines on access control matrix)
	=09
Secure Data Storage:
	Encryption at Rest
		-malicious disk firmware
	Deletion of Data
		-recovering deleted data from exposed hard disks that were not zeroed or =
degaussed

Secure Internet Communication
	Google Front End Service
		-Compromising future data-in-transit after cracking encryption key (lack =
of temporal/ephemeral keys - perfect forward secrecy)
	Denial of Service (DoS) Protection
		-DoS
	User Authentication
		-unauthorized login

Operational Security
	Safe Software Development
		-developers intentionally introducing new security vulnerabilities
	Keeping Employee Devices and Credentials Safe
		-phishing
	Reducing Insider Risk
		-insider attacks
	Intrusion Detection
		-intrusion via remote code execution</pre></li>

<li><pre class=3D"student-text"># Secure Low Level Infrastructure
## Security of Physical Premises
1/ Physical intrusion in datacenter
## Harware Design and Provenance
2/ Exploit flaw in hardware
3/ A piece of hardware being replaced with altered one
## Secure Boot Stack and Machine Identity
4/ Replace BIOS of base operating system with rogue one

# Secure Service Deployment
## Service Identity, Integrity, and Isolation
5/ MITM attack: a fake server pretending to offer a certain service
6/ Modification of the codebase from a compromised Google engineer
7/ Submitting malicious code to be run on Google machines.
## Inter-Service Access Management
8/ Escalation of privileges (using a compromised Google service to compromi=
se another)
## Enryption of Inter-Service Communication
## Access Management of End User Data
9/ A user accesses the address book of another user by altering the request=
 issue by Gmail

# Secure Data Storage
## Encryption at Rest
10/ Stealing hard drive
## Deletion of Data
11/ Unwanted deletion of account by third party

# Secure Internet Communication
## Google Front End Service
12/ MITM attack
## Denial of Service (DoS) Protection
13/ DoS attack
## User Authentifcation
14/ Stealing credentials (keylogger, phishing)

# Operational Security
## Safe Software Development
15/ Cross-site scripting
16/ Exploiting 0-day flaws
## Keeping Employee Devices and Credentials Safe
17/ Stealing employee credentials
18/ Trojans on employee devices
## Reducing Insider Risk
19/ Insider attack
## Intrusion Detection
20/ Exploiting an intrusion

# Securing the Google Cloud Platform


</pre></li>

<li><pre class=3D"student-text">* Secure low level infrastructure: Here goo=
gle is trying to prevent security risks that can arise from unauthorized pe=
ople gaining access to their servers. For example, if someone were to try a=
nd break into a server room and extract data or steal the hard drive, the s=
ecurity measures described in this section should prevent that. They also a=
re able to prevent people from replacing the hardware with custom hardware =
that might cause trouble.
* Secure service deployment: This is meant to prevent fake services from be=
ing launched on google servers. It is also meant to assure authentic google=
 services don=EF=BF=BDt come in contact with services that could be dangero=
us. Overall, this section is about making sure the software deployed on the=
 servers is authentic, and not custom software written by an attacker.
* Secure data storage: The techniques in this section are attempting to pre=
vent attacks that would try to steal or delete data from the data storage. =
They do this by making sure data is encrypted before being stored and marki=
ng data for deletion so that it isn=EF=BF=BDt deleted right away.This way i=
f people extract the data from storage they won't be able to view the conte=
nts.
* Secure Internet Communication: This section is largely trying to protect =
against DoS attacks.
* Operational Security: This section is trying to protect against attacks a=
gainst employees, for example someone stealing an employee=EF=BF=BDs laptop=
 and attempting to gain special access. It also assures that hackers that a=
re good developers can=EF=BF=BDt exploit bugs in the software itself.
* Securing the Google Cloud Platform: This section is trying to protect aga=
inst all of the attacks above, except for the virtual machines stored in th=
eir cloud service. Internet attacks, phishing attacks, stolen passwords, Do=
S attacks and data theft are all trying to be prevented here.
</pre></li>

<li><pre class=3D"student-text">*Security from people gaining physical acce=
ss to hardware - could destroy it, take drives to attempt to read data off =
them(though hopefully encrypted), people running their own software on the =
hardware or trying to read any unprotected lines of communication in the ha=
rdware
*protect against inherent hardware flaws (like spectre and meltdown?)
*protect against devices pretending to be Google devices to gain access to =
resources they shouldn't
*protect against unauthorized software running on any machine with cryptogr=
pahic signature checks
*IP spoofing
*prevent employees from making malicious code changes to source code
*User software breaking out of its sandbox
*Prevent a service from communicating with another service maliciously (pre=
vented with whitelist)
*Network line being tapped
*Network device being compromised (and network data being read as it goes t=
o / through this compromised network device)
*Prevent a user from accessing another user's information (by having a cent=
ral auth service provide end user permission tickets per user)
*malicious disk firmware(prevented with application layer encryption)
*old hardware being read to uncover unwiped data
*DoS attacks
*Users logging into stolen / unowned accounts
*XSS
*0-day exploits
*protect employee credentials from being impersonated
</pre></li>

<li><pre class=3D"student-text">- An attacker physically accessing or destr=
oying data in a data center
- An attacker connecting a malicious illegitimate hardware device to the ne=
twork
- An attacker overwriting the OS of a server and running their own maliciou=
s server that is connected to the network
- An attacker deploying a malicious service, which can attack other service=
s running on the same hardware or network
- An attacker gaining access to an internal service api which is intended o=
nly for a certain list of servers
- An attacker who has access to the network, listening to traffic between s=
ervices
- An attacker builds a service that tracks information about a user even wh=
en the user is not interacting with it
- An attacker is able to recover data from a decommissioned hard drive
- An attacker is able to leverage a vulnerability in the network interface =
of a service to attack that service or other services which are accessible =
through this interface
- DoS attacks
- brute-force password attacks
- Vulnerabilities in open source projects
- Phishing of employees
- A malicious employee with access to user data
</pre></li>

<li><pre class=3D"student-text">- Employees working in a 3rd party data cen=
ter containing Google machines could
  tamper with machines.
- A malicious vendor could give Google an insecure mimic of a Google machin=
e.
- An employee could introduce a backdoor using a tampered
  BIOS/bootloader/kernel.
- An adversary could spoof a Google IP and request secure data.
- Employees could make malicious changes to code outside of their purview.
- An adversary could tap the network and gain access to application
  information.
- An adversary could tap the WAN between data centers.
- An adversary could pretend to be an end user and request private informat=
ion.
- Someone could search through a decommissioned machine and obtain informat=
ion
  off of it.
- An employee could maliciously delete code or information that shouldn't b=
e
  deleted.
- An adversary could attack using Heartbleed or similar security flaws in T=
LS.
- An adversary could mount a DDoS attack.
- Users might fall prey to phishing attacks.
- Someone might guess or obtain user login info and use it on their own dev=
ice.
- A Google employee could accidentally write vulnerable code.
- An employee might download an insecure application or fail to update thei=
r
  machine after a bug is discovered.
- A Google employee might try to obtain user's private information.
- A component of the security system might fail and go unnoticed for a long
  period of time.
- A client running an application in a Google VM might try to gain access t=
o
  other client's applications.
</pre></li>

<li><pre class=3D"student-text">- Physical Premises: Attacker physically st=
eals servers.
- Hardware Provenance: Attacker working for a networking equipment vendor c=
overtly inserts a backdoor in a network chip to steal data.
- Secure Boot stack: Attacker installs a malicious BIOS on a server, giving=
 him full access to the machine.
- Service Identity/Integrity/Isolation: Attacker spoofs the identity of one=
 of Google's internal services and exercises the privileges of that service=
.
- Inter-Service Encryption: Attacker snoops on RPC calls within Google's in=
tranet or between its data centers.
- Access Management of End User Data: Attacker co-opts a service that handl=
es his own user data to request data from other users.
- Encryption at Rest: Attacker compromises a storage server and uses it to =
read arbitrary data stored on disk.
- Google Front End/DoS Protection: Attacker uses a collection of client com=
puters to overload Google's network with requests.
- User Authentication: Attacker attempts to guess or brute-force users' pas=
swords.
- Safe Software Deployment: Attacker within Google inserts malicious backdo=
or into Google's source code.
- Employee Devices: Attacker uses a phishing attack to compromise a Google =
Employee's personal laptop and thereby to gain access to Google's intranet.
</pre></li>

<li><pre class=3D"student-text">- Securing physical premises where their ha=
rdware's stored.
- Bugs/backdoors injected into their hardware, network chips, server boards=
.
- Bugs/backdoors injected into their low-level software, firmware like the =
BIOS, bootloader, kernel.
- Denial of service attacks
- Each service is trated as an independent server. Spoofing attempts to inv=
oke a malicious/unknown service.
- Malicious source code injection by an insider
- Abuse of internal access to data/source code
- Abuse of access to user data
- Deletion of data
- Unwitting injection of XSS and other security bugs in shipped out softwar=
e </pre></li>

<li><pre class=3D"student-text">- When hosting servers on third-party data =
centers, Google does not have full control of the security (particularly ph=
ysical) of the area, so the servers could be compromised if there is not ex=
tra, Google-controlled security in place
- A vendor could sell Google a chip that is malicious or does not have secu=
re enough hardware
- An external machine could try to impersonate a Google machine
- An external service could try to impersonal a Google service, or one that=
 has permission for certain inter-service communication
- A malicious insider could try to give themselves more access than they ar=
e allowed
- A secure network could be tapped
- A network device could be compromised
- An end user may try to impersonate a different end user
- A storage device wiped clean may still not pass some verification tests (=
so maybe it would still be possible to access some data)
- A user/service may intentionally (maliciously) or accidentally delete dat=
a
- DoS attacks
- Employees or end users could be targets of phishing
- XSS vulnerabilities (client-side code injection)
- There could be security flaws in third party / open source software that =
is used
- An employee could install an application, not knowing that it has malicio=
us software
- A malicious insider could try to destroy the infrastructure / code / ever=
ything in and part of Google!
- A user of GCE could try to access other users=E2=80=99 data
- A user of GCE could try to access Google=E2=80=99s data and code</pre></l=
i>

<li><pre class=3D"student-text">- insider threat
- DoS/DDoS
- login abuse
- man in the middle
- physical access to the machine
- phishing
- leaked passwords
- modified versions of software/BIOS/etc
- spoofing
- overly broad permissions
- forensics on discarded machines
- unwanted deletion of data
- fuzzing
- lateral movement of an attacker
</pre></li>

<li><pre class=3D"student-text">- people literally coming in and stealing h=
ard drives out of data centers
- fake devices on data center networks trying to pose as members of the cen=
ter to steal data
- booting malicious data on startup of devices
- services exploiting other services on Google Cloud
- people making malicious modifications to source code
- accessing services you're not supposed to
- listening in on inter-service communication
- trying to get information from other users instead of just your own accou=
nt
- malicious disk firmware stealing information
- deleting data maliciously
- DoS attacks on internal services
- DoS attack on exposed services
- trying to authenticate as another user
- cross site scripting
- phishing attacks on employees
- executives looking at sensitive information
- trying to control google via the compute engine</pre></li>

<li><pre class=3D"student-text">- someone physically destroys the data
- someone makes a hardware backdoor
- someone corrupts the software stack
- someone intercepts client/server communications and modifies them
- someone intercepts inter-service communications and modifies them
- a service requests information on behalf of a user without their permissi=
on
- someone reads unencrypted data from storage
- denial of service attacks
- a user poses as another Google user
- a developer writes risky software that somehow gets pushed to production
- a developer writes software that can be used as a backdoor
- someone's password gets compromised and there's no two factor authenticat=
ion
- too many people get admin rights and information gets leaked</pre></li>

<li><pre class=3D"student-text">-Secure Low Level Infrastructure



Security of Physical Premises

Google defends against hackers compromising the data center in person by ha=
ving extensive physical security layers like biometric identification and c=
ameras.



Hardware Design and Provenance

Data may be compromised through various hardware components from third part=
y vendors, so Google custom-designs many parts and vets component vendors.



Secure Boot Stack and Machine Identity

Malicious parties could attack Google server machines by forcing them to bo=
ot an incorrect software stack.



-Secure Service Deployment


Service Identity, Integrity, and Isolation
Hackers may try to modify Google's central repository or intercept communic=
ation.=20



Inter-Service Access Management

Malicious parties could communicate with Google services if there is no aut=
hentication management.



Encryption of Inter-Service Communication

Google protects against man in the middle attacks.



Access Management of End User Data

Hackers cannot pretend to be users without their "end user permission ticke=
t" - authentication protocols protect user data.



-Secure Data Storage



Encryption at Rest

Performing encryption at application layer isolates the infrastructure from=
 threats at lower levels such as harmful disk firmware.=20



Deletion of Data

Hackers could try to delete data from the data storage.



-Secure Internet Communication



Google Front End Service

GFE protects against Denial of Service (DoS) attacks.=20



Denial of Service Protection

Hackers could try to throttle Google Services by sending large amounts of r=
equests. Google checks incoming traffic and if deemed to be a DoS attack, i=
t can drop loads or throttle traffic associated.



User Authentication

User accounts could be compromised if hackers gained knowledge of usernames=
 and passwords, so Google challenges users for additional information.



-Operational Security

Safe Software Development

Internal employees could accidentally introduce security bugs into the cent=
ral code base - Google has internal frameworks to eliminate certain bugs.



Keep Employee Devices and Credentials Safe

Google protects against security attacks on employee devices by scanning an=
d controlling content and use of sophisticated authentication protocols.



Reducing Insider Risk

Malicious parties could be internal to Google and thus have been granted ad=
min access in the servers. Therefore, most actions require two-party approv=
als and Google's security team monitors actions.



Intrusion Detection
Hackers could attack data processing pipelines and bring down servers.
</pre></li>

<li><pre class=3D"student-text">-low level/hardware infrastructure: physica=
l attack on datacenters
-service deployment: malicious modifications to source code
-user identity: IP spoofing
-storage services: malicious disk firmware
-internet communication: DoS
-operational security: phishing targeted to employees</pre></li>

<li><pre class=3D"student-text">1.	Someone physically invading the google d=
ata center to steal data
2.	Someone exploiting security vulnerabilities from old version of software=
, or running an unverified low-level component with security flaws=20
3.	programmers that might make modifications to applications that compromis=
e security (knowingly or unknowingly) and malicious applications that might=
 mess up other applications=20
4.	applications communicating with services that they shouldn=EF=BF=BDt hav=
e the privilege to talk to, potentially getting private data
5.	Someone intercepting RPCs between services and compromising the data=20
6.	leakage of data associated with other users beside the user of interest =
by services that request data about a specific user.=20
7.	Someone successfully recovering data from decommissioned storage devices=
=20
8.	Malicious/ buggy code or user deleting the wrong data
9.	Malicious programs on the the internet compromising a google service.=20
10.	DOS attacks to bring down Google services / or cost Google a lot of  mo=
ney
11.	User account being compromised by a malicious agent
12.	Developers introducing security bugs=20
13.	Someone stealing employees credentials and getting privileged access to=
 google services
14.	A google employee comprising the security directly through their privil=
eges=20
15.	An intrusion that goes unnoticed for a long period of time stealing ton=
s of data
</pre></li>

<li><pre class=3D"student-text">1. Direct tampering of hardware. For exampl=
e, stealing servers from data centers or destroying servers.
2. Someone adding a fake component or replacing a component to try to steal=
 data from the machines.
3. Someone trying to boot servers with fake software to steal data or someo=
ne tapping into the local server network and masquerading as a legitimate s=
erver to gain access.
4. A Google engineer trying to update the code for some service to do malic=
ious things will be checked by an approver.
5. Google engineers with access to one service do not necessarily have acce=
ss to other services so it is harder for one malicious engineer to wreck ha=
voc on all the services.
6. People tapping in between data centers into private WAN links will not b=
e able to parse the data even if they can see all the packets because the i=
nformation is encrypted.
7. User B cannot make requests to a Google service regarding User A=E2=80=
=99s private information (i.e. emails). They would need to login to verify =
that they have the right permissions.
8. Someone digging through Google=E2=80=99s garbage and obtaining a hard dr=
ive or SSD will not be able to get any data off of it because it will have =
been wiped.
9. If a malicious entity deletes someone=E2=80=99s data or account, that pe=
rson can still recover it within a specific time frame because the data is =
scheduled for deletion and not immediately deleted.=20
10. When there are security updates that need to be made (like updates to T=
LS termination protocol), all of the publicly available Google services tha=
t are registered with GFE get the updates at the same time and probably mor=
e quickly than if individual services needed to implement them.
11. Load balancers and a central DoS server protects against DOS attacks.
12. Even if someone trying to get access to your account has your username =
and password, they may have trouble getting in. Google will detect high-ris=
k patterns like logging in from a new device or new location and ask for ad=
ditional verification information.
13. Google works on finding security gaps in open source software they use =
and not just their own code so that hackers can=E2=80=99t use third party s=
oftware as a means to break into Google.
14. Using U2F security keys protects Google work machines and employee acco=
unts against phishing and man-in-the-middle attacks.
15. Google tries to prevent employees from abusing their access to end user=
s=E2=80=99 information (for example, seeing someone=E2=80=99s birthday) by =
having a security team actively monitor who sees what.
16. Google not only tries to prevent attacks, they also monitor infrastruct=
ure and signals so that they can detect when an intrusion happens as soon a=
s possible.
17. Someone with a VM on the Google Cloud Platform cannot gain access to ot=
her Google data  that they don=E2=80=99t have permissions for due to isolat=
ion (KVM) and segmentation (VMM). That and using the GFE gives services run=
ning in Google=E2=80=99s Cloud similar levels of protections as to other se=
rvices not running in GCP.</pre></li>

<li><pre class=3D"student-text">1. Physical attacks, such as attempts to di=
srupt service by destroying/stealing hardware in a data center.
2. Attacks utilizing components with built-in backdoors or known security f=
laws.
3. Attacks that cause a server to boot the wrong software stack, running ma=
licious code.

4. Insider attacks, where an employee makes malicious changes to the source=
 code.
5. Attacks from services running on Google's machines, that are designed to=
 disrupt other services or the internal network.
6. Attacks from end users who are trying to access data of end users whose =
data they are not intended to be able to access.

7. Attacks in which sensitive data from decommisioned hard drives could be =
used by an adversary.
8. Possibility of recovery from any malicious or accidental deletion of dat=
a through deletion scheduling.

9. Attacks that could utilize "weak link" points-of-entry of Google's netwo=
rk to compromise the network as a whole.
10. Denial-of-service attacks.
11. Attacks involving a user trying to impersonate another user.

12. Cross-site scripting attacks.
13. Phishing attacks on employees.
14. Insider use/access of user data.
</pre></li>

<li><pre class=3D"student-text">1. Physical protection of data
2. Hardware tampering (such as potential backdoors)
3. Ensuring that the code run for low-level software is validated
4. IP spoofing (pretending to be google) in the application layer
5. Insider maliciousness (writing harmful code)
6. Bugs or security problems in one service leaking to another service (usi=
ng isolation and sandboxing to solve the issue)
7. Man-in-the-middle tapping to requests
8. Users pretending to be each other. Privacy invasion
9. Denial of service attacks
10. Unintentional software bugs with security concerns
11. Employees being phished
</pre></li>

<li><pre class=3D"student-text">1. Vendors placing backdoors in hardware.=
=20
2. Services being run on the infastructure communicating/taking data from s=
ervices run on the same infrastructure.=20
3. Data being collected from thrown out hardware.=20
4. DoS attacks on cloud services.=20
5. Employees devices compromised, which compromises the software that they =
are working on.=20
</pre></li>

<li><pre class=3D"student-text">6.858
Michael Picchini
picchini@mit.edu

Lec2 Answers

Security of Physical Premises
  Unauthorized access to machinery/data.  Physically stealing hardware to g=
et data.

Hardware Design and Provenance
  Outside vendors putting backdoors in components.

Secure Boot STack and Machine Identity
  Manipulated software which compromises google's systems.

Service Identity, Integrity, and Isolation
  Malicious services trying to access restricted information.

Inter-Service Access Management
  Employees attempting to access restricted information.

Encryption of Inter-Service Communication
  A tapped network, where the person tapping intercepts the data.

Access Management of End User Data
  Attacker with account accessing other user's data. Example is the bank di=
scussed in lecture.
=20
Encryption at Rest
  Malicious disk firmware reading the stored data.

Deletion of Data
  Attackers attempting to destroy accounts by having data deleted immediate=
ly.  Google's policy protects against such attacks.

Google Front End Service
  DoS protection, incorrect TLS termination.

Denial of Service (DoS) Protection
  DoS attacks that aim to crash google's services and prevent access.

User Authentication
  Phishing related attacks aiming to steal passwords and as a result compro=
mise accounts.

Safe Software Development
  Common attacks like XSS that are common but preventable.

Keeping Employee Devices and Credentials Safe
  Attacks that aim to gain unauthorized access by targeting Google employee=
s.

Reducing Insider Risk
  Employees that may try to compromise data for personal gain.

Intrusion Detection
  Attacks that have already succeeded in bypassing the security measures in=
 place.
</pre></li>

<li><pre class=3D"student-text">6.858 Google Infrastructure Security Design=
 Overview
Lecture 2 Questions response
Sam Nguyen

Potential Attacks: Secure Low Level Infrastructure
  Breaking into the data centers and stealing the hard drives
  Malicious or corrupt hardware providers
  Corrupting low level hardware components in the servers

Potential Attacks: Secure Service Deployment
  Attacks to corrupt or modify the source code for a service
  Attacking other services through an already compromised service
  An employee account attacking a service that he/she does not have access =
to
  Stealing information by tapping into the network path

Potential Attacks: Secure Data Storage
  Stealing thrown out hard drives
  Data deletion

Potential Attacks: Secure Internet Communication
  DoS Attacks
  Stealing end-user devices to gain access
  Phishing end-users

Potential Attacks: Operational Security
  Phishing against employees
  Corrupting employee devices
  Malicious employee attacking from the inside

Potential Attacks: Google Cloud Platform
  Attacks to any of Google's cloud services
</pre></li>

<li><pre class=3D"student-text">A list of potential attacks:

1. Harmful intrusion from the third party datacenters Google deploys.
2. Hackers pretend to be one of the Google=E2=80=99s servers and trick the =
clients to provide credential information.
3. Malicious employees, who are not the developers of the applications, try=
 to modify the source code to allow information leakage.
4. Hackers wants to hack into Google=E2=80=99s IP space.
5. Hackers sending DoS attacks repetitively using one application to save e=
fforts.
6. Hackers steal employee=E2=80=99s username and password for Google accoun=
t login.
7. The infrastructure developers want to insert security bugs into the sour=
ce code.
8. Hackers try to attack employees=E2=80=99 user installed apps and through=
 which to get user information.

</pre></li>

<li><pre class=3D"student-text">An attacker can go to a data center and cor=
rupt disks using magnets.
Vendors could purposely sell malicious hardware.
A self-inflicted unintentional attack where hardware falls behind security =
updates.
A service can be deployed that intercepts messages between other services.
An attacker that is able to tap into the inter-service network still won't =
be able to do anything due to the end-to-end encryption.
A Gmail user can request contacts for any Gmail user and sell that informat=
ion.
An attacker attempting to delete an entire database won't be able to due to=
 the deletion schedule mechanism.
Any DoS and phishing attack.
A defective employee that wants to access information from their former par=
tners, or wants to damage Google internally.
</pre></li>

<li><pre class=3D"student-text">Answers to Google Security Paper - Ajinkya =
K Nene

Low Level Infrastructure

Security of Physical Premises
- Preventing a physical hack on a datacenter

Hardware Design and Provenance
- Preventing hacks happening due to 3rd party software/devices

Secure Boot Stack and Machine Identity
- Someone hacks the software stack that is booted at initiation

Secure Service Deployment

Service Identity, Integrity, and Isolation
- Someone uses IP spoofing to target clients

Inter-Service Access Management
- Someoone assigns access priviledges that are not approved

Encryption of Inter-Service Communcation
- Hacker tries to compromise confidentiality of the data

Access Management of End User Data
- End user permission is faked by a hacker

Secure Data Storage

Encryption at Rest
- Hacker attempts to break into lower level software to gain access to appl=
ication layer

Deletion of Data
- Hacker attempts to maliciously delete user data

Secure Internet Communication

Google Front End Service
- Hacker attempts a DOS attack

DOS Protection
- Prevent a classic DOS attack (denial of service)

User Authentication
- Hacker attempts to pass as a different user

Operational Security

Safe Software Development
- Hacker attempts to install malicious software by injecting into a Google-=
platform developers application

Keeping Employee Devices and Credentials Safe
- Hacker attemps to gain access to internal infrastructure through employee

Reducing Insider Risk
- Hacker attempts a social engineering hack

Intrusion Detection
- Prevent a hacker from accessing network

Securing the Google Cloud Platform
- Prevent hacker from compromising confidentiality of data transfer from cu=
stomer VM to VM traffic.




</pre></li>

<li><pre class=3D"student-text">As you are reading this paper, think about =
what attacks Google is trying
to prevent with each of the security measures described in this document.
Submit a list of potential attacks that Google is worried about,=20
approximately 1 per subsection in the document.

List of Potential Attacks:
1. Low Level Infrastructure=20
  - Physical breakins and intruders
  - Illegitimate hardware on servers

2. Service Deployment (Hardware to Software)
  - Server access for an unauthorized administrator
  - IP spoofing
  - Malicious insider programmer
  - Inter-service interference
  - Comprimised network or network device
  - Server/Data access by an unauthorized user

3. Data Storage
  - Stolen private encryption keys
  - Data deletion

4. Internet Communication
  - DoS attacks

5. Operations Security
  - Hacking of employee machines
  - Malicious code libraries
  - Phishing

6. Google Cloud
  - Dos attacks
  - Malicious Boot Chains
 =20
</pre></li>

<li><pre class=3D"student-text">As you are reading this paper, think about =
what attacks Google is trying to prevent with each of the security measures=
 described in this document. Submit a list of potential attacks that Google=
 is worried about, approximately 1 per subsection in the document.

- Physical access to and tampering with servers
- Physical access to and tampering with stored user data
- Malicious BIOS/firmware
- Malicious OS images
- Malicious/incompetent vendors who may swap out machine hardware
- Malicious/incompetent support staff who may swap out machine hardware
- Inappropriate service-service access
- Inappropriate user-service access
- Malicious on-the-WAN data tapping
- Malicious recovery of improperly deleted data
- DoS attacks on Google services
- DoS attacks on Google customer services
- User impersonation
- User credential theft
- Attack injection into codebase by employees
- Attack injection into operational pipeline by admins
- Employee credential theft
</pre></li>

<li><pre class=3D"student-text">As you are reading this paper, think about =
what attacks Google is trying to prevent with each of the security measures=
 described in this document. Submit a list of potential attacks that Google=
 is worried about, approximately 1 per subsection in the document.

=3D=3D=3D=3D=3D=3D=3D


Google is worried about tons of different kinds and methods of attack:
-Attacker getting physical access to a machine, potentially planting a bug =
or stealing data or damaging servers.
-Compromised hardware designs
-Compromised bios or boot sector, etc.
-faking client requests to fool servers or faking servers to fool clients.
-Abuse of APIs
-Snooping on inter-service communications is another one.
-Using one service's permission to get access to information from another o=
ne for a different user.
-Compromised disk firmware leading to unsafe "encryption" of data.
-DoS attack
-Phishing attacks
</pre></li>

<li><pre class=3D"student-text">As you are reading this paper, think about =
what attacks Google is trying to prevent with each of the security measures=
 described in this document. Submit a list of potential attacks that Google=
 is worried about, approximately 1 per subsection in the document.

Attack by unauthorized person walking into data center and breaking/disrupt=
ing/modifying stuff
Attack by insecure or malicious hardware being installed
Changes in boot stack (malicious code injection into server os or low-level=
 code)
IP spoofing
Fake service trying to "join" and communicate with/within services
Bad code being pushed (against malicious code being added to repository or =
simply bad mistakes)
Unauthorized access of end user data--authorized google user trying to acce=
ss data that isn't there
Reading of discarded storage hardware
Accidental deletion of data (by user or by bug)
DoS attacks
Variety of attacks by network listeners
Access of user account by non-user
Developer security bugs
Employee devices and credentials being compromised
Employees accessing end user data
Lack of practice in response mechanisms and teams
Hijacking of accounts and virtual machines

</pre></li>

<li><pre class=3D"student-text">As you are reading this paper, think about =
what attacks Google is trying to prevent with each of the security measures=
 described in this document. Submit a list of potential attacks that Google=
 is worried about, approximately 1 per subsection in the document.

Part 1

Security of Physical Premises: Physical attacks, employee compromise, fakin=
g an employee's id

Hardware Design and Provenance: Prevent commands to short boards on servers=
, prevent devices from masquerading as Google secure devices.

Secure Boot Stack and Machine Identity: Make sure someone else's software s=
tack is being booted, aka some Trojan booting on a server.

Service Identity Integry and Isolation: MITM attacks, MITM reading of priva=
te/sensitive data, track down perpetrator of an attack.

Inter-Service Access Management: prevent a phony service from accessing oth=
er services/information.

Encryption of Inter-Service Communication: MITM attacks, network-tapping.

Access Management of End User Data: phony user impersonating someone with p=
ermissions can't access everyone's information.=20

Encryption at Rest: malicious disk firmware, stealing old-unused drives

Deletion of Data: Can prevent deletions of important data=20

Google Front End Service: DoS attacks and many other web-based attacks.

DoS protection: DoS attacks

User Authentication: stealing user credentials

Safe Software Development: Prevent buggy code from being used, prevent rogu=
e employees from tampering with code

Keeping Employee Devices and Credentials Safe: prevent hacking/hijacking of=
 employee's devices. Prevent phishing.

Reducing Insider Risk: rogue evil employee attack

Intrusion Detection: detect malfeasance on the network

Secure Service Deployment.
Google secures everything that travels on their network. This prevents MITM=
 attacks. Also prevents a MITM from viewing sensitive private data. Google =
also keeps an audit of who touches code inside their main repo. This allows=
 them to quickly track down the perpetrator of an inside-job attack.

Secure Data Storage
Google secures data at rest and safely disposes of all drives. Google does =
this to prevent leaking any security data. Potential attacks include: steal=
ing old drives from the Google dumpster, attempting to read private data fr=
om Google server racks.

Secure Internet Communication
Google has an application that functions like a firewall to the outside wor=
ld for any applications inside it. It's known as GFE. It protects any users=
 of the system from a variety of outsider attacks including DoS attacks.

Operational Security
Google has a bug program and keeps employee interaction with data centers t=
o a minimum. This severely downgrades the simplicity of an insider attack a=
nd helps keep Google on the front edge of finding bugs.

Securing the GCP
GCP runs on top of all the other security protocols created by Google. Ther=
e are also service-specific protocols built in for additional safety, such =
as only specific services can RPC other services. Similiarly, users can onl=
y also access information from specific services. This gated model means an=
 intruder into the system can't access anything else on the system, only sp=
ecific services.

Part 2

A lot of esoteric terms are used in the report. The paper lacked overall st=
ructure. A comprehensive diagram of the safeguards at each level from Data =
Centers -&gt; Hardware -&gt; Software -&gt; Cloud would be immensely helpfu=
l. The paper only used specific terms such as application level encryption.=
 What is the application level, exactly, and what is above/below it? They a=
lso say "We use cryptographic authentication and authorization". What's the=
 difference between authentication and authorization? </pre></li>

<li><pre class=3D"student-text">At the hardware level Google is worried abo=
ut compromised hardware so they design their own hardware and vet the vendo=
rs they use. This is particularly important because nowadays the manufactur=
ing and building of hardware is distributed across many entities and thus p=
rovides many points of entry for attackers.

Google automatically encrypts all communication at the service level. This =
is to prevent compromises caused by tapping communications between Google s=
ervices.

Google also is wary of insider attacks. For changes to the code base it for=
ces admin approval. In general Google monitors those with high internal acc=
ess and requires two party approval for some actions.

Google is also concerned about malicious disk firmware and other low level =
hardware/firmware threats on the data storage side. To prevent this, Google=
's storage is handled through storage applications which automatically encr=
ypt data at the application level.

Google is also concerned about DDoS attacks. Almost humorously, Google's hi=
gh performance is one of the best defenses because it can theoretically jus=
t handle the traffic (I heard this happened to Amazon once). But they also =
load balance traffic and monitor incoming traffic. By tracking information =
related to incoming traffic, if an attack is detected it is then possible t=
o drop connections that are from a DDoS attack.

One of the key concerns Google pointed out, and one it has almost the least=
 control over, is what it calls "walking through the front door" or attacks=
 that are due to users being compromised. In particular phishing attacks ar=
e difficult to prevent because to Google the user looks the same. To preven=
t this Google uses 2 factor authentication through U2F. This way the creden=
tials alone are not sufficient for login.
</pre></li>

<li><pre class=3D"student-text">Attacks Google is Worried About

_______________________________
Secure Low Level Infrastructure
-------------------------------
Security of Physical Premises
- Physical theft


Hardware Design and Provenance
- Untrusted third-party vendors tamper with hardware


Secure Boot Stack and Machine Identity
- Unknown malicious replication of hardware

-------------------------------
Secure Service Deployment
-------------------------------
Service Identity, Integrity, and Isolation
- Service impersonation, insider attacks, and having the whole system attac=
ked as a result of one service being compromised


Inter-Service Access Management
- Unauthorized access of services


Encryption of Inter-Service Communication
- Networks being tapped and reading communication


Access Management of End User Data
- Gmail accessing user contact data whenever it wants

-------------------------------
Secure Data Storage
-------------------------------
Encryption at Rest
- Malicious disk firmware reading data


Deletion of Data
- Unintentional deletion of data

-------------------------------
Secure Internet Communication
-------------------------------
Google Front End Service
- Incorrect certificates (i.e. expired)


Denial of Service (DoS) Protection
- DoS attacks


User Authentication
- Hijacking of users

-------------------------------
Operational Security
-------------------------------
Safe Software Development
- Attacks for well-known security bugs in code


Keeping Employee Devices and Credentials Safe
- Phishing employee


Reducing Insider Risk
- Insider attacks


Intrusion Detection
- Detection for all attacks

-------------------------------
Securing the Google Cloud Platform
-------------------------------
- All attacks described above</pre></li>

<li><pre class=3D"student-text">Attacks Google is trying to prevent:

Security of Physical Premises:
- An attacker walking into a datacenter and physically destroying
or stealing machines.

Hardware Design and Provenance:
- Vendors including backdoors in hardware=20

Secure Boot Stack and Machine Identity:
- An attacker somehow causing the servers to boot with a compromised
kernel

Service identity, Integrity, and Isolation:
- An attacker writing a Google App Engine application that attempts
to compromise other Google Services

Inter-service Access Management:
- An insider attempting to modify access groups in mallicious ways.=20

Encryption of Inter-Service Communication:
- An attacker attempting to sniff wireless communication between=20
Google services

Access Management of End User Data:
- An attacker somehow using one Google Service to get
info about other users from a different service.

Encryption at Rest:
- An attacker being able to read application data after somehow
compromising Google hardware.

Deletion of Data:
- An attacker compromising a user's account and attempting to=20
delete their data.

Google Front End Service:
- Some sort of attack involving bad TLS certificates - not entirely
sure.

Denial of Service Protection:
- Sophisticated DDoS attacks.=20

User Authentication:
- An attacker guessing an end-user's password.

Safe Software Development:
- Attackers finding security vulnerabilities through implementation mistake=
s
in Google services.

Keeping Employee Devices and Credentials Safe:
- An attacker launching a phishing campaign against Google employees.

Reducing Insider Risk:
- An attacker who's an insider at Google attempting to compromise systems o=
r
data in some way.

Intrusion Detection:
- An attacker attempting to compromise data without detection.
</pre></li>

<li><pre class=3D"student-text">Attacks Google tries to prevent
=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D=3D=3D=3D=3D
* Servers being physically tampered with or stolen.
* An imployee inserting backdoors into critial services
* Confidential data being recovered from discarded drives.
* Distributed denial of service attacks
* XSS attacks against Google's users
</pre></li>

<li><pre class=3D"student-text">Attacks being defended against:=20
1. Physical attacks to the data center -- people breaking in, or otherwise =
harming the servers physically
2. People planting a non-google device within the data center, or otherwise=
 trying to connect an insecure device, which might serve as a window into t=
he system
3. Services using non-approved channels to retrieve information they are no=
t supposed to have access to, potentially bypassing higher levels of securi=
ty=20
4. Similarly, approved channels being used incorrectly where information fo=
r all users is accessible from any user, given the correct request. This is=
 really bad for user information isolation and privacy within google system=
s.=20
5. DoS attacks=20
6. Unsafe software -- placing backdoors in code via the development system.=
 This is avoided with signatures.=20
7. Unsafe requests from within a VM. </pre></li>

<li><pre class=3D"student-text">Attacks google is worried about

*LOW LEVEL INFRASTRUCTURE

PHYSICAL PREMISES
Intrusion
Meddling by non-google employees

HARDWARE
Deletion of Data
Backdoors put in through hardware

SOFTWARE
Exploitation of bugs in security software

*SECURE SERVICE DEPLOYMENT

SERVICE IDENTITIY
Unauthorized code being deployed somewhere
Potential security bugs in properly deployed code
One service failing causing another to fail

SERVICE ACCESS MANAGEMENT
An employee being able to access something they shouldn't
An employee being able to change what they can access without approval

INTER-SERVICE COMMUNICATION
Tapping the private WAN links

MANAGEMENT OF END USER DATA
Accessing of data for a different user

*SECURE DATA STORAGE

ENCRYPTION AT APPLICATION LAYER
Malicious disk firmware
Attack on a failed Hard Drive encryption

DELETION OF DATA
Deletion of the wrong thing

*SECURE INTERNET COMMUNICATION

Denial of service attacks
System failure over too many user requests at once

*OPERATIONAL SECURITY

SAFE SOFTWARE DEVELOPMENT
Devlopers accidentally introducing security bugs
XSS vulnterabilities in web apps
Zero day exploits

EMPLOYEES
Phishing
Insider attacks</pre></li>

<li><pre class=3D"student-text">Attacks that Google appears to be worried a=
bout (organized by subsection):
* Security of Physical Premises: Direct attacks against hardware which requ=
ire physical access
* Hardware design / provenance:  Malicious hardware from a vendor (e.g., th=
at provides a back door)
* Secure Boot Stack:  Malicious low-level software (e.g., BIOS) that enable=
s root access to a machine
* Service Identity, Integrity, and Isolation:  Attack via a compromised ind=
ividual service though malicious code changes
* Inter-service access managmeent: Compromised service being able to access=
 other, sensitive services
* Encryption of inter-service communication:  Man in the middle attacks to =
pick up on communication over private WAN links
* Access Management of End User Data: Without this, a compromised service (=
e.g., gmail) would be able to request contacts of any user at any time
* Encryption at Rest: Attack that involves gaining access to a de-commissio=
ned server and recovering the data from it
* Deletion of Data: Unclear that this is a specific attack, though perhaps =
they are worried about a malicious attack that results in the deletion of s=
ensitive data
* Google Front-End Service: Attack that involves getting access to an encry=
ption key at a later date, and used to decrypt earlier communications (prev=
ented via perfect forward secrecy)
* DoS Protection:  Distributed Denial of Service attacks
* User Authentication: Phishing attacks against users, where the attacker w=
ould then try to login as the user on a different machine
* Safe Software Development: 0-day exploits present in the open-source soft=
ware (e.g., the KVM hypervisor) that Google depends upon
* Employee Credentials: Spear-phishing attacks against employees.  Compromi=
sed employee desktops and laptops
* Reducing insider risk: Malicious employees who are given access to user d=
ata for debugging purposes might steal it, hence the need for limited APIs
* Intrusion Detection: Unclear that this is a specific attack, and more the=
 general threat of someone finding a way into the architecture
</pre></li>

<li><pre class=3D"student-text">Chris Frangieh
Lecture 2 Reading Assignment
2/11/18

Security of Physical Premises: An in-person attack on the physical hardware=
 storing sensitive information.

Hardware Design and Provenance: Malware or malicious circuitry already on c=
hips when purchased from a vendor.

Secure Boot Stack and Machine Identity: Malware injected into low-level OS =
components that could gain kernel level privilege upon start-up of the mach=
ine.

Service Identity, Integrity, and Isolation: Malicious services attempting t=
o interfere with API operations, such as by intercepting communication betw=
een service and client or a DoS attack.=20

Inter-Service Access Management: A participant (client, employee) in one se=
rvice or tier of service gaining privileged access to another service or hi=
gher tier or service.

Encryption of Inter-Service Communication: The interception of communicatio=
n between services, whether packets sent over a network of services sharing=
 the same physical machine.

Access Management of End User Data: An adversary trying to fake the identit=
y of an end user to gain access to data, such as the user's Gmail account.

Encryption at Rest: Stealing of physical hardware or gaining remote access =
to hard drives by bypassing the application network layer.

Deletion of Data: Accidental deletion of data either internally or by an ex=
ternal adversary.

Google Front End Service/DoS Protection: Malicious TLS connections occupyin=
g server bandwidth.

User Authentication: An adversary attempting to fake an identity and login =
to a different user's account.

Safe Software Development: Code injection by a software developer or softwa=
re development tool submitting code to be run on a Google machine.

Keeping Employee Devices and Credentials Safe: Phishing attack against a Go=
ogle employee that would allow an adversary to gain privileged access to Go=
ogle systems.=20

Reducing Insider Risk: A Google employee becoming an adversary and working =
to expose confidential information.

Intrusion Detection: An adversary attacking Google systems at an unusual ti=
me or discreetly.=20

Securing the Google Cloud Platform: Malicious servers acting as authentic G=
oogle servers and communicating with Google data centers.</pre></li>

<li><pre class=3D"student-text">Danny Tang

data1013

2/8/18



Reading 1



Question:=20

As you are reading this paper, think about what attacks Google is trying to=
 prevent with each of the security measures described in this document. Sub=
mit a list of potential attacks that Google is worried about, approximately=
 1 per subsection in the document.


Answer:

Someone physically breaking their data center machines
Someone trying to make fake Google components to steal data from the overal=
l machine
Someone compromising Google machines to boot with a fake OS that will steal=
 their data
An employee trying to push malicious code
Someone trying to create a fake service to communicate with real Google ser=
vices
Someone trying to listen to inter service HTTP requests/responses
Users impersonating other users to get access to their data
Someone somehow getting access to one of their hard drives and trying to re=
ad straight from it
Someone trying to access old data from deleted accounts
Someone trying to access data on services that aren't publicly available
Someone trying to DoS a service
Someone trying to login as another user from a different device
Someone trying to exploit bugs in open source software that Google depends =
on to gain access to Google data
A developer creating a malicious application that a Google employee install=
s on their corporate device
An inside employee with admin access abusing their privileges to steal/comp=
romise data
Phishing
</pre></li>

<li><pre class=3D"student-text">Elliott Forde

- secure premises in data warehouses prevents intruders from accessing phys=
ical servers
- google-specific hardware prevents, in the case of intruders, custom malic=
ious hardware from being added to servers
- secure boot stack prevents servers from booting into malicious software, =
in the event an intruder was able to flash a server
- service identity and isolation prevents adversaries from impersonating fe=
llow Google microservices
- inter-service access management prevents malicious employees from tamperi=
ng with extremely sensitive data by enforcing permissions for each service
- encryption of inter-service communication prevents snooping of service-to=
-service data and tampering of said data
- access management of end user data prevents users from accessing each oth=
er's data using other Google services as a middleware
- encryption at rest dissuades stealing of hard drives with sensitive data
- the Google Front End Service acts as a centralized, secure proxy for all =
external-facing Google services, handling TLS handshakes and DoS prevention=
 mechanisms
- DoS protection prevents adversaries from taking down the availability of =
Google services by throttling potential DoS attacks
- user authentcation prevents impersonation
- safe software development practices, such as code review, prevent malicio=
us internal parties from pushing malicious code to production
- employee devices are kept safe in order to prevent impersonation of emplo=
yees, giving an adversary extensive access to the Google Cloud
</pre></li>

<li><pre class=3D"student-text">Google Attacks
- Physical attacks=20
    Google is protecting physical attacks by securing their facilities with=
 cameras and lasers and securing their hardware with custom security chips =
that validate the machine's BIOS, OS, and other critical pieces of software=
 using cryptographic signatures.
    Outside vendors that create hardware for Google must have vetted securi=
ty procedures.

- Secure Software Services
    Google sandboxes each software service on each physical machine and sep=
erates mission critical services onto their own machine
    Each service has its own identification signature that allows Google to=
 verify a service has not been compromised. Additionally, Google tracks eac=
h user's identity and makes sure that critical code changes must be reviewe=
d by at least one other Google engineer.
    Google has their own RPC layer that preserves the security of a message=
 regardless of the network path. Within this layer, a user token may be pro=
vided allowing access to a specific user's data thus facility secure data t=
ransfer procedures within services.

- Secure Data Storage
    Physical disks are encrypted and can only be accessed by services with =
verified keys. Data is not deleted from these drives immediately, instead i=
t is scheduled for deletion.

- Secure Internet Communication
    In addition to Google's secure RPC layer, they use a private IP space t=
o protect from DDOS attacks. The size of the network also insulates Google =
from DDOS attacks. Google uses universal second factor authentication to hi=
nder phishing attacks.

- Operational Security
    Google requires employees to use U2F security keys for employee account=
s and monitors employee devices for malicious apps, extensions, and content=
. Google sandboxes employee priviledges for access to applications and requ=
ires two party review on code changes.
    Google has a machine learning platform that searches for security intru=
sions based on a variety of network based signals.

- Secure Google Cloud Platform
    The google cloud platform runs virtual machines on Google's infrastruct=
ure thus providing all the security precautions mentioned above

</pre></li>

<li><pre class=3D"student-text">Google Document subsections are in parenthe=
sis
(Secure Low Level Infrastructure)
-Physically stealing a server/Larceny
-Hardware Trojans
-Boot Sector Virus

(Everything under Service Identity, Integrity, and Isolation protects again=
st attacks where people gain unauthorized access to resources, including:)
-Man in the middle attack
-IP Address Spoofing/ARP spoofing
-Phishing attacks to steal login credentials
-possible vulnerabilities in commonly used network technologies, such as SS=
L

(Secure Data Storage)
-Malicious Rootkits
-Recovering data from hard drives that don't belong to you that have been t=
hrown away
-Buffer overflows/stack overflows that manage to read hard drive data

(Secure Internet Communication)
-DOS attacks
-ping attacks
-wiretapping of network packets
-port scanning

(Safe Software Development)
-double-agent employees/Espionage from other companies or actors
-spyware installation on company machines
</pre></li>

<li><pre class=3D"student-text">Google Infrastructure Security

Secure Low Level Infrastructure
-Physically breaking in to the datacenters and stealing information
-Using hardware with vunerabilities or backdoors
-Having imposter components that pretend to be part of the system but aren'=
t actually

Secure service deployment
-Deploying a user-written service that injects harmful material into Google=
's codebase
-Having a service sabotage or access data from another service
-Having listeners on the inter-service RPC traffic
-Posing as an end user and getting private information meant only for the e=
nd user

Secure data storage
-Extracting data after it's been stolen
-Posing as a user and requesting deletion of the user's account

Secure Internet Communication
-DoS attacks
-Attacks involving adversaries posing as other authetic users

Operational Security
-Employees adding vulerabilities (intentionally or unintentionally) to the =
code base
-Having someone hack into a employee's machine or account and having access=
 to the code base
-Evil employees stealing and selling peronal user information
-Someone hacking into Google's network and listening to traffic

Securing the GCP
-All of the attacks listed above, but for cloud


</pre></li>

<li><pre class=3D"student-text">Google Infrastructure Security Design Overv=
iew


=3D=3D=3D Secure Low Level Infrastructure =3D=3D=3D

Google is concerned about attacks at the hardware level, such as from someo=
ne *physically* breaking in to their datacenter and gaining manual access t=
o their machines. They are also worried that a vendor might have sold them =
a compromised machine --- so they only buy from trusted sources.


=3D=3D=3D Secure Service Deployment =3D=3D=3D

Google is concerned that a malicious binary might be deployed on one of the=
ir tiers. This is both at the application level (something already running =
got out there and is making bad requests) and the source code level (an ins=
ide engineer might try to push something destructive).


=3D=3D=3D Secure Data Storage =3D=3D=3D

Google is worried about someone reading "at rest" data from their datacente=
rs, or from decommissioned servers.


=3D=3D=3D Secure Internet Communication =3D=3D=3D

Google is concerned about attacks at a higher level than infrastructure att=
acks. This inlcudes DoS and user authentication.


=3D=3D=3D Operational Security =3D=3D=3D

Google is concerned about inadvertant vulnerabilities. Such as bugs in thei=
r code, code they rely on,  or employees getting phished.


=3D=3D=3D Google Cloud =3D=3D=3D

Google is concerned about their clients who use their services being hacked=
. They extend their internal security protocols to benefit services run by =
outside customers on the Google Cloud Platform.
</pre></li>

<li><pre class=3D"student-text">Google Infrastructure Security Design Revie=
w Lecture Question

=E2=80=A2   Security, Identity, Integrity, and Isolation: Google tries to p=
revent unauthorized modifications to its code by placing permission and rev=
iew requirements on its source code.
=E2=80=A2   Inter-Service Access Management: Independent services implement=
 a whitelist permissions scheme to isolate themselves, thus limiting the ac=
cess abilities gained by compromising part of the system.
=E2=80=A2   Encryption of Inter-Service Communication: Encryption of RPC da=
ta prevents packet sniffing on the internal network from providing any insi=
ght into the operation of Google services.
=E2=80=A2   Access Management of End User Data: End User Permission Tickets=
 prevent users from accessing each other=E2=80=99s data without possessing =
the proper permissions.
=E2=80=A2   Encryption at Rest: Performing encryption at the application la=
yer prevents the compromise of on-hardware firmware from compromising the d=
ata stored on the device.
=E2=80=A2   Encryption at Rest: Devices must pass a wiping procedure or be =
destroyed when decommissioned. This prevents the recovery of sensitive data=
 by anyone who may receive the drive when it=E2=80=99s removed from Google =
premises.
=E2=80=A2   Google Front End Service: TLS termination allows Google to encr=
ypt user data when outside its network, protecting it from being intercepte=
d.
=E2=80=A2   Denial of Service Protection: The GFE allows Google to provide =
infrastructure to its internal services that rebalance incoming traffic and=
 mitigate Denial of Service attacks.
=E2=80=A2   User Authentication: Depending on information from previous log=
ins, Google provides additional challenge information for anomalous logins =
in order to mitigate the effects of phishing.
=E2=80=A2   Safe Software Development: Google makes significant contributio=
ns to the open source software projects it utilizes, preventing others from=
 utilizing bugs in those programs in order to compromise Google services.
=E2=80=A2   Keeping Employee Devices and Credentials Safe: Google provides =
application-level access management preventing employees from using incorre=
ctly managed devices. Thus, they avoid having compromised personal devices =
leak information on google services.
=E2=80=A2   Reducing Insider Risk: Google strictly limits and monitors admi=
nistrative access, preventing the leaking of these credentials to unauthori=
zed actors.
=E2=80=A2   Intrusion Detection: Google monitors its internal network traff=
ic to try and detect unauthorized access.
</pre></li>

<li><pre class=3D"student-text">Google Security Design Potential Attacks Ha=
ndled by Each Layer

Operational Security:
	A potential attack that this layer was put in place to handle is an attack=
 where a Google employee
	or any insider party with access to Google facilities uses their ability t=
o access Google facilities
	in order to attack Google's network from within.

Internet Communication:
	A potential attack that this layer was put in place to handle is a DDoS at=
tack.

Storage Services:
	A potential attack that this layer was put in place to handle is an attack=
 where a malicious entity
	bypasses Google's security to access and delete information in their datab=
ases.

User Identity:
	A potential attack that this layer was put in place to handle is an attack=
 where a malicious entity
	attempts to login to another individual's Google account. If the malicious=
 entity is seen to be logging
	in from an abnormal location or a different device, Google has measures in=
 place to take action against
	the perpetrator.

Service Deployment:
	A potential attack that this layer was put in place to handle is an attack=
 where a malicious entity
	acts as a middle-man between two Google services and tries to feed one ser=
vice malicious instructions.

Hardware Infrastructure:
	A potential attack that this layer was put in place to handle is an attack=
 where a malicious entity
	breaks into Google's data centers and physically damages Google servers.
</pre></li>

<li><pre class=3D"student-text">Google is taking measures to prevent attack=
s on different levels - from physical intrusion to insider theft to remote =
attacks. Here's a list of some potential attacks google is trying to preven=
t.

Physical break in
Stealing HHDs
Destroying/damaging servers
Connecting malicious devices to the network
Substituting hardware or low-lever software on the machines
Fake malicious service access
Unauthorized service access
Insiders
Bugs in code
Independent sandboxes accessing each other's data
Unauthorized user access
Sniffing/intercepting traffic
Apps accessing user's information without authorization
Apps accessing other user's information
Auth hijacking
Recovering data from decomissioned SSDs
DoS
Stealing credentials
Vulnerabilities in code
Viruses/worms
Misuse of software by employees
KVM Vulnerabilities</pre></li>

<li><pre class=3D"student-text">Google is trying to prevent against an enor=
mous array of attacks, including:
- physically breaking into a datacenter
- malicious or compromised datacenter hardware
- malicious or compromised kernels/OS
- impersonating a Google service
- IP spoofing
- malicious user-uploaded code
- insiders maliciously editing service code
- insiders maliciously accessing services
- access of inter-service traffic
- impersonation of another end-user
- access of discarded disks
- DoS attacks
- XSS attacks
- phishing attacks on end-users
- zero-day exploits
- compromised employee devices
- and more
</pre></li>

<li><pre class=3D"student-text">Google is trying to prevent some of these a=
ttacks:
- An adversary physically enters a data center to steal or tamper with Goog=
le's data.
- A vendor sells hardware with security bugs, and an adversary exploits the=
se bugs to access Google's data.
- An adversary tampers with Google servers, so that they load a software st=
ack that destroys or compromises Google's data.
- An adversary tries to impersonate a Google service to gain access to data=
 from another service.
- An adversary changes the source code of a service to leak data.
- An adversary within Google could access a service he should not have acce=
ss to, and attack that service.
- An adversary could access inter-service data by listening on the network.
- An adversary could access user data that belongs to other people if a ser=
vice requests (and gets) information for many people at a time.
- An adversary uses malicious hardware running Google services to access da=
ta that the services store on that hardware.
- If services independently implement protections for interfacing with the =
internet, then a service that incorrectly implemented them could be exploit=
ed.
- DoS attacks
- An adversary tries to steal a user's information by logging in with their=
 username and password on a device the user has never used.
- An adversary inspects the source code of services, and finds and exploits=
 a security bug.
- An insider with sufficient privileges tampers with Google's data or servi=
ces.</pre></li>

<li><pre class=3D"student-text">Google is worried about the following types=
 of attacks:

People walking into the physical data centers and stealing hardware
People inserting their own (malicious) servers into Google datacenters
People inserting a malicious service onto a machine + infecting other servi=
ces
People eavesdropping on the network / inserting their own malicious packets
People faking a user credential
People stealing hardware and looking into it after it has been discarded by=
 Google
People attempting a denial-of-service attack
People stealing a username/password from a customer and using their data
People developing software at Google maliciously and purposefully introduci=
ng security holes
People stealing a Google employee's authentication device / credentials
People targeting the Google Cloud Platform</pre></li>

<li><pre class=3D"student-text">Google may be trying to prevent the followi=
ng attacks via their security design.

Secure Low Level Infrastructure
a. Security of Physical Premises
    - Physical theft of data.
b. Hardware Design and Provenance
    - Backdoors built into the hardware (e.g. CPU) running Google software.
c. Secure Boot Stack and Machine Identity
    - Backdoors built into the OS running Google software.

Secure Service Deployment
a. Service Identity, Integrity, and Isolation
    - Impersonation of internal Google services to gain access to received
      data.
b. Inter-Service Access Management
    - Attempts to access confidential data by insider adversaries.
c. Encryption of Inter-Service Communication
    - Listening to data passed over the internal network.
d. Access Management of End User Data
    - Internal services accessing data by making requests on behalf of
      (impersonating) the user.

Secure Data Storage
a. Encryption at Rest
    - Access to confidential data in the case that a hard drive is compromi=
sed.
b. Deletion of Data
    - Accidental deletion of user data.

Secure Internet Communication
a. Google Front End Service
    - General attacks on the front end (e.g. DoS)
b. Denial of Service (DoS) Protection
    - DOS attacks on services (protected on the front end)
c. User Authentication
    - Impersonation of Google users by adversaries.

Operational Security
a. Safe Software Development
    - Backdoors built into packages developers may use.
b. Keeping Employee Devices and Credentials Safe
    - Phishing attacks on employees.
c. Reducing Insider Risk
    - Customer information access by insiders (employees).
d. Intrusion Detection
    - General compromise of individual devices.
</pre></li>

<li><pre class=3D"student-text">Hardware Infrastructure
- Worried about bad actors compromising physical hardware,
i.e. installing physical loggers that record instructions, data, or encrypt=
ion keys.

Service Deployment
- Google is worried that traffic between services may be subject to a man i=
nt the middle attack
or that a non compartmentalized service can be used to exploit another serv=
ice.

User Identity
- Ensure users only have access to data and resources they are untitled too=
,
prevents misuse and privilege escalation attacks.

Storage services
- Encryption and deletion of data ensures user/company privacy is preserved
and thwarts an attack from accessing privileged data at rest or post-deleti=
on.

Internet Communication
- The use of GFE services and load balancers counter-acts the distributed d=
enial of service attacks,
it also enables a secure layer of abstraction.

Operational Security
- Careful monitoring of employee machines prevents google services from bei=
ng compromised from an internal bad actor
or unintentionally via un-audited software, i.e. an engineer downloads a tr=
ojan hidden in a dev tool.
- The use of automated vulnerability monitoring and a bug bounty programs
reduces the total number of exploit vectors an actor might employ.
</pre></li>

<li><pre class=3D"student-text">Hardware: hardware backdoors, physically st=
olen storage media, attacks via BIOS
Service deployment: sandbox escapes, IP spoofing, insider threat
User identity: impersonation, replay attack
Storage services: data leaving premises via exfiltration, storage media bei=
ng sold, etc
Internet communication: DoS, future brute-force decryption, cert spoofing
Opsec: software bugs, phishing, malicious downloads, insider threat</pre></=
li>

<li><pre class=3D"student-text">I Secure Low level Infrastructure
- The security of physical premises aims at preventing physical penetration=
s and attempts to steal or corrupt the data or disrupt the operations of se=
rvices provided to the clients, partners, and employees.
- Google ensures security along its supply chain to prevent its hardware, w=
hich will be installed in Google networks, from backdoors implemented at di=
fferent design, manufactoring, and delivery stages. Google also embeds secu=
rity "by design" into its hardware by installing security chips to protect =
their identity to prevent attacks via rogue devices.
- Google ensures that its hardware runs genuine software to protect from bo=
th types of attacks, based on false identity and malicious software.=20

II Secure Service Deployment=20
- Google takes measures for ensuring services' identity, integrity, and iso=
lation. E.g. isolation is a great method to prevent an impactful service fr=
om being maliciously impacted through a hacked "minor" service. Buffer over=
flow is a nice example of the type of an attack, which can be potentialy ap=
plied to the services executed in a common memory space.
- Inter-service access management prevents services from being called by ma=
licious or non-authorized services. It protects from situations when a serv=
ice with poor protection is compromized and then it calls a critical servic=
e to execute an unauthorized procedure. =20
- Encryption of inter-service communication protects against a man in the m=
iddle attack, when communication between legitimate services can be interce=
pted and replaced by malicious content.
- Access management of end user data allows to prevent the data of one user=
 being compromized by an unauthorized call. E.g. it blocks attempts to get =
malicious access to the user's contacts by calling a service get_contact() =
as another user.

III Secure Data Storage=20
- Encryption of data at rest at an application and disk level allows to pre=
vent data breaches caused by a simple theft of a physical drive or stealing=
/changing the data on hard disks by putting a malicious firmware at for exa=
mple, the manufactor's facility abroad.
- Adequate data delition policy protects the availability of data from bein=
g maliciously deleted by an attacker. In addition, the proper deletion of h=
ard drives protects the data from being unauthorizedly restored by "bad guy=
s".

IV Secure Internet Communication
- False TLS certificate presentation while connecting to Google services is=
 one of the attacks which are prevented by Google Front End Service.
- Denial of Service (DoS) protection prevents situations when the availabil=
ity of one or several services is broken by the DoS type of attack.
- User Authentication prevents access to Google services using stolen ident=
ities by taking into account various factors in addition to a simple pair u=
sername&amp;password. These factors can be the user's location, device from=
 which the user is trying to log in to the service etc.

V Operational Security=20
- Safe Software Development addresses the issues of compromised software ar=
ised as a result of unsafe coding practices. These vulnerabilities can be f=
urther exploited by an attacker. E.g. a cross-site scripting vulnerability =
in a web application can be exploited by an attacker.
- Google employees' credentials look like a very lucrative target for an at=
tacker, especially if an employee has a broad set of access rights to Googl=
e's systems. The risk of an attacker accessing a system using stolen creden=
tials is addressed by using an advanced dual-factor authentication mechanis=
m U2F.
- Humans are not perfect and a Google employee can be potentially bribed fo=
r stealing data that he/she has a ligitimate access to.
- Intrusion detection is a part of the "respond" part of Google's cybersecu=
rity strategy. This measure prevents even successful intrusions from their =
further exploitation.  =20
        =20
VI Securing the Google Cloud Platform (GCP)
- An attempt to get unathorized access customers' data by bribing a Google =
employee becomes challenging, since Google employees don't have access to a=
ctual data, which are stored encrypted by the clients' keys. </pre></li>

<li><pre class=3D"student-text">INTRODUCTION
SECURE LOW LEVEL INFRASTRUCTURE
Security of Physical Premises
	Identity Spoofing
	Theft=20
Hardware Design and Provenance
	Malware attacks
	3rd party tampering
Secure Boot Stack and Machine Identity
	Compromised-key attack
	Unknown replication
SECURE SERVICE DEPLOYMENT
Service Identity, Integrity, and Isolation
	Ip spoofing
	Hijacking
Inter-Service Access Management
	Privilege Escalation
Encryption of Inter-service Communication
	Network sniffing/snooping
      Sybil
Access Management of End User Data
	 Unrestricted access to all data
SECURE DATA STORAGE=20
Encryption At Rest
	Compromised Data
	Malware
Deletion of Data
	Sabotaging data=20
SECURE INTERNET COMMUNICATION
Google Front End Service
	Wormhole attacks
Denial of Service Protection
	DoS attacks
User Authentication
	Phishing
OPERATIONAL SECURITY
Safe Software Development
	Cross-site scripting
	Fuzzing
Keeping Employees Devices and Credentials Safe
	Theft
Reducing Insider Risk
	Insider attacks
Intrusion Detection
	Injection attaks
SECURING THE GOOGLE CLOUD PLATFORM (GCP)
	Any application layer attacks, spoofing, eavesdropping, tunneling=20



</pre></li>

<li><pre class=3D"student-text">In this summary, I'll first briefly describ=
e the background/context
of the security scenario, and then, by section, explain what are main goals=
=20
for each layer of security.

background: Google has a global infrastructure that provides both public/co=
nsumer
services such as Google search, and enterprise-level products such as Googl=
e Cloud. It
structures its security infrastructure in layers that range from low-level,=
 physical
and hardware-level security, to high-level internet and networking security=
.

* secure low-level infrastructure

At this level, a potential attack is simply an invasion to get direct acces=
s to data. Google reduces such risk
by designing its data centers with multiple layers of security and only all=
owing some few employees
to access those.=20
The hardware itself is designed by Google (and all vendors are carefully ch=
osen), and multiple authentication
methods are employed to legitimize machines (so that one won't be able to s=
ubstitute chips,
machines etc., or sell hardware with backdoors). Finally, machines each hav=
e their own identity (again, making hijacking or
substitution harder) and have a series of methods to boot correct software =
(so that malicious=20
software) is harder to inject.

* secure service deployment

impersonation and anominity within services are avoided by encrypting all o=
f the communication that is done between services, and associating every se=
rvice
with an account (so that clients know that they talk to intended systems, a=
nd can filter for those).
This full access management allows allow systems to identify and (mutually)=
 authenticate (and possibly deny) services and users,=20
making it harder for any potential change in code being done my someone who=
 doesn't have permissions. A similar
situation is handled by all of the source code being isolated and requiring=
 approval from at least one other engineer
in order to an engineer to make any change or add any code.=20

Finally, a given attacker can't corrupt or destroy other user's/developer's=
 software because google isolates all of the=20
services within a same machine (by user separation, kernel sandboxing etc.)=
 and isolates critical services
(such as coordinating of those services) in their own special machines.=20


* secure data storage

Disk-level malicious software can't read user data stored physically - phys=
ically stored data needs to be=20
accessed through selected applications, and those use a series of keys (fro=
m a central
key management system) that encrypts all of the data before it is written -=
 so that when the data hits the hardware=20
it is already encrypted and hence protected from potential local sources of=
 malicious code/data. Still, hardware-level
encryption can also be made and data that leaves the hardware must pass thr=
ough two steps verification (so that data is
even more protected from falling in the wrong hands). Deleted data is usual=
ly tagged as "for deletion" and deleted
in case-by-case basis according to a given application's policies. =20


* secure internet communication

to protect services from DoS and similar attacks, Google services live in a=
n internal IP space and are hence isolated from external connections.
If a given service needs to be published (i.e., made public), it must use t=
he Google Front End (GFE)
as a service. GFE specializes in handling connections from external users, =
protecting from DoS attacks, scaling and
TLS termination (this allows services to be exposed the least to the intern=
et and all requests to have to pass
through GFE).

DoS protection can be done because the system is set up so that a given con=
nection needs to pass through multiple layers of load-balancers
(that distribute requests and avoid denial of service). When a DoS attack i=
s detected, load balancers can drop requests
or even throttle traffic from the attacker. A final layer ensures user-leve=
l security by requesting passwords and=20
checking if the it is expected that a given user will be accessing his/her =
account in a given machine or/and in a given
place, prompting the user with questions and requests for authentication (s=
o that it is harder for hackers to impersonate someone)

=20

* operational security

google reduces the risk of buggy, unsecure software being introduced by usi=
ng pre-approved tested libraries in its code, having
constant peer-review, and using automated detection of security bugs. Moreo=
ver, it runs an internal program to reward bug detection.=20
In order to reduce phishing attacks, it uses U2F-Security keys for employee=
 accounts; it also meticulously protects all of the=20
employees' devices that are used within/for the google. Moreover, a series =
of software track and detect suspicious activity, so that
intruders can be detected.=20


</pre></li>

<li><pre class=3D"student-text">Inside job physical hardware access
Chip design attacks
Chip falsification
Ensure up-to-date software
Trust based deployment of services
Denial of service=20
Engineers pushing bad code (required checks)
Sandboxing of services to not allow interference
Allowing services to only communicate if defined to
Identity spoofing
Tapping communication between services
Requirement to have an end user to retrieve data
Encryption key reuse
Decommissioned hardware being unencrypted
Automatic load balancing exploits
Secondary password factors
Employee frameworks to limit vulnerabilities in software
Automated detection of vulnerabilities
Phishing Attacks
Monitoring of employee devices
Vulnerabilities in 3rd party software
Unencrypted LAN traffic
</pre></li>

<li><pre class=3D"student-text">Jeanie Pearson
Lecutre 2: Google Security Infrastructure Design Overview.

Method: Security of Physical Premises
Prevents: Physical theft of hard drives/servers containing data, physically=
 disabling services by unplugging servers, physically destroying the server=
s

Method: Hardware Design and Provenance
Prevents: Built-in back doors on hardware, easily exploitable hardware vuln=
erabilities

Method: Secure Boot Stack and Machine Identity
Prevents: Booting up unauthorized OSes unknowingly where an attacker logs y=
our data, running attacker code directly from the BIOS

Method: Service Identity, Integrity, and Isolation
Prevents: One service running malicious code to impact another service, one=
 service's popularity taking down another service running on the same machi=
ne, malicious source code being checked in, accidentally running a modified=
 (attacker) version of a service

Method: Inter-Service Access Management
Prevents: Services accessing other services that they shouldn't be allowed =
to (limits scope of attacks), Googlers making malicious changes to services=
 that they shouldn't have access to

Method: Encryption of Inter-Service Communication
Prevents: An attacker reading everything that travels on the network (local=
 or WAN), impact from a compromised network device, modifying requests in-t=
ransit

Method: Access Management of End User Data
Prevents: An attacker accessing someone else's data, a compromised service =
making unnecesary requests for a user's data

Method: Encryption at Rest
Prevents: Data leaking on old, unused hard drives, any lower-level security=
 problems from leading to a data breach

Method: Deletion of Data
Prevents: Accidental deletion (malicious?), a service continuing to use a u=
ser's data after they've deleted their account

Method: Google Front End Service
Prevents: Services directly managing their external internet connections co=
uld forget to close requests, etc, and thus expose themselves to security b=
ugs. Also, by avoiding public IPs for services they better avoid DDoS attac=
ks.

Method: DoS Protection
Prevents: DoS attacks

Method: User Authentication
Prevents: An attacker from logging in to another user's account

Method: Safe Software Development
Prevents: Introducing security bugs into new code (ie XSS vulnerabilities a=
nd many more)

Method: Keeping Employee Devices and Credentials Safe
Prevents: Phishing employees to get their logins and thus an attacker has e=
mployee-level access, getting a malicious app installed on an employee's ph=
one to steal company data

Method: Reducing Insider Risk
Prevents: A Googler compromising Google's data or systems

Method: Intrusion Detection
Prevents: Unnoticed data breach
</pre></li>

<li><pre class=3D"student-text">Lec 2
Secure Low Level Infrastructure:
At this point Google faces threats of people gaining access
to the hardware, which they can then use to destroy, replace,
or modify the data physically

Secure Service Deployment:
At this level Google faces threat of someone inserting or
trying to interact with Google's infrastructure using
malicious code or by spoofing their machine to be a Google
machine

Secure Data Storage:
At this level Google faces threat of the modification of the
stored data, either by inappropriate deletion of data or by
physically accessing the storage devices (even after they
are no longer used)

Secure Internet Communication:
At this level Google communicates with the internet at large,
and must protect itself against common internet attacks
such as DoS and injection attacks

Operational Security:
At this level Google must protect the workspaces and
employees that work for Google.  Google faces the threat
of an employee device getting hacked and then having
someone on the outside gain access to Google from an
employee device

GCP:
The Google cloud platform allows customers to run VMs on
Google's infrastructure, and thus any threats that face
Google's infrastructure also face the GCP</pre></li>

<li><pre class=3D"student-text">Lecture 2

-----------------------------------------------------------------
As you are reading this paper, think about what attacks Google is
trying to prevent with each of the security measures described in
this document. Submit a list of potential attacks that Google is
worried about, approximately 1 per subsection in the document.
-----------------------------------------------------------------

Google uses many layers of security to block attacks at all levels.

- All code is code reviewed my multiple engineers, this can prevent careles=
s
 errors like buffers vulnerable to overflows.

- Google has developed software frameworks and libraries that eliminate
XSS attacks. The also have tools to scan written code to see if other
vulnerabilities are present. This helps them prevent bugs in their user-fac=
ing
software.

- Datacenter premises are tightly controlled. Since the easiest way to hack=
 a
server is to get physical access to it, they tightly control who gets acces=
s.

- All stored data gets encrypted at the application layer. This gives isola=
tion
to the infrastructure involved, which helps prevent lower level attacks lik=
e
malicious disk firmware.

- All of Google's infrastructure uses a private IP space rather than connec=
ting
to the internet directly, called Google Front End.
This allows only a subset of machines to have to interface directly with
 the internet, and gives protection against internet based attacks like
 DDoS attacks. Additionally, all of the front end machines report request i=
nfo
 to a central service that is monitoring traffic volumes. In case of a DDoS
 attack, the service can throttle or scale up any connection.

- Google has a bug bounty and vulnerability rewards program
 which rewards users inside and outside Google for finding security bugs,
 rather than exploiting them. Given their capital, this is a good strategy.

- Preventing phishing of employees with access to data. Using U2F security =
keys,
and an array of 2FA services, forcing employee software to be up to date, a=
nd
regularly scanning employee devices helps  prevent inside users from being
compromised.

- Google controls their HDs for their entire lifecycle. They are unboxed fr=
om a
vetted supplier in the datacenter and configured. They are encrypted, even =
at
rest, for their  entire operational life. Then, they are wiped and shredded
on-site. This prevents adversaries from obtaining old HDs, taking them apar=
t,
and possibly recovering some sensitive data on the drives.

- Many Google services use other Google services under the hood. When doing=
 so,
they present an =E2=80=9Cend user permission ticket=E2=80=9D as part of the=
 RPC on behalf of the
user requesting the service. This creates a safeguard where it only returns
data for the end user named in the ticket. This prevents against attacks
trying to get data out of Google, rather than inject bugs into Google.

- On a higher level, Google has configured many daemons to watch for possib=
le
security incidents across all infrastructure. All of these signals are eith=
er
read by security specialists, or machine learning algorithms they create to
find possible  security incidents. Here, even if a bug could occur in their
system  security, it would be detected and fixed quickly. This is important
it is impossible to protect against every vulnerability.

- GCP VM's are ran with KVM, which is GNU and open source.
 Google extensively tests the core of KVM using techniques
 like fuzzing, static analysis, and manual code review to make sure
 no bugs were introduced from open source contributors, malicious or
 accidental.
</pre></li>

<li><pre class=3D"student-text">Lecture 2

As you are reading this paper, think about what attacks Google is trying to=
 prevent with each of the security measures described in this document. Sub=
mit a list of potential attacks that Google is worried about, approximately=
 1 per subsection in the document.

1. Security of Physical premises - Physical break-in
2. Hardware design and provenance - Faulty equipment
3. Secure Boot stack and Machine identity - outdated server software
4. Service Identity, Integrity and Isolation - Man in the middle attacks
5. Encryption of Inter-service communication - Adversary eavesdropping=20
6. Access management of end user data - Unauthorized access
7. Encryption at Rest - Malicious disk firmware=20
8. Deletion of Data - Unintentional deletions
9. DoS protection - Denial of Service
10. Safe software deployment - zero day exploit
11. Keeping Employee Devices and Credentials Safe - Phishing
</pre></li>

<li><pre class=3D"student-text">Lecture 2

Secure Low Level Infrastructure=20
Security of Physical Premises - Prevents physical attacks by terrorists and=
 other nefarious organizations.
Hardware Design and Provenance - Custom chips and equipments ensure hardwar=
e fidelity on the lowest level.
Secure Boot Stack and Machine Identity - Each machine is authenticated with=
 cryptographic signatures to ensure
that unverified machines can't enter the network

Secure Service Deployment
Service Identity, Integrity, and Isolation - Google's security features ens=
ure that the services they run
are properly sandboxed. API calls require credentials which check that clie=
nts are properly rate limited, and servers
are authenticated.
Inter-Service Access Management - Programmers can control who accesses thei=
r services so that the services can't be misused.
Encryption of Inter-Service Communication - Encrypting traffic prevents net=
work tapping.
Access Management of End User Data - Prevents end users from accessing data=
 from services from other users.=20

Secure Data Storage
Encryption at Rest - Data is stored on physical storage only after it's enc=
rypted. Storage devices have to be decommissioned=20
during retirement to prevent data leaks.
Deletion of Data - Scheduled for deletion provides a window prior to deleti=
on, to account for unintentional deletions.

Secure Internet Communication
Google Front End Services - GFT provides DoS protection, and checks certifi=
cates.
Denail of Service Protection - GFE can drop or throttle requests that are d=
eemed to be malicious.=20
User Authentication - It's important to check whether users are the ones lo=
gging into their accounts.

Operational Security
Safe Software Development - Google cares tremendously about finding bugs be=
fore they're exploited.=20
Keeping Employee Devices and Credentials Safe - Employees are a popular ave=
nue for attack.
Reducing Insider Risk - Employees are limited in terms of what services the=
y can access.

Securing the Google Cloud Platform - Ensuring that security is automaticall=
y layerd into client applications prevents
entire classes of security problems.
</pre></li>

<li><pre class=3D"student-text">Lecture 2 (Answer to Paper Question)
Jorge Troncoso

Question:
As you are reading this paper, think about what attacks Google is trying to=
 prevent with each of the security measures described in this document. Sub=
mit a list of potential attacks that Google is worried about, approximately=
 1 per subsection in the document.


Answer:

Security of Physical Premises:
With these measures, Google is trying to prevent thieves from stealing data=
 stored in the hard drives at their datacenters.

Hardware Design and Provenance:
With these measures, Google is trying to prevent attackers from authenticat=
ing with Google devices through software to exploit the system.

Secure Boot Stack and Machine Identity:
With these measures, Google is trying to prevent attackers from getting the=
 servers to boot into malicious code.

Service Identity, Integrity, and Isolation:
With these measures, Google is trying to prevent insiders from introducing =
security vulnerabilities into the system.

Inter-Service Access Management:
With these measures, Google is trying to prevent attackers from communicati=
ng with services that only need to communicate with a limited number of ser=
vices.

Encryption of Inter-Service Communication:
Google uses encryption to prevent attackers from accessing protected data b=
y monitoring the network traffic.

Access Management of End User Data:
With these measures, Google is trying to prevent attackers from accessing d=
ata that is only intended to by accessed by specific users.

Encryption at Rest:
Google encrypts data written in physical storage to prevent attackers from =
reading it if they happen to acquire the bits stored in disk (by introducin=
g malicious disk firmware, stealing the disk, etc.)

Deletion of Data:
Not sure, what types of attacks Google is trying to prevent by "scheduling =
data for deletion". As far as I can tell, they're just saying they "schedul=
e data for deletion" rather than removing the data entirely so they can rec=
over from unintentional deletions. Maybe they're trying to give customers a=
n opportunity to recover their data if an attacker manages to delete their =
data.

Google Front End Service:
The Google Front End support perfect forward secrecy to prevent attackers f=
rom retrieving sessions recorded in the past should they manage to compromi=
se long-term secret keys or passwords.

Denial of Service (DoS) Protection:
With these measures, Google is trying to prevent attackers from making a Go=
ogle machine or network resource unavailable to its intended users.

User Authentication:
With these measures, Google is trying to prevent attackers from logging int=
o another user's account.

Safe Software Development:
Google uses static analysis tools to prevent developers from accidentally i=
ntroducing a security vulnerability into the system.

Keeping Employee Devices and Credentials Safe:
With these measures, Google is trying to prevent attackers from accessing p=
rotected data through phishing.

Reducing Insider Risk:
Google monitors the activities of employees to prevent insiders from access=
ing data they aren't supposed to.

Intrusion Detection:
With uses automated software to warn of possible incidents so the damage do=
ne by an attacker is minimized.


</pre></li>

<li><pre class=3D"student-text">Lecture 2 Reading: https://cloud.google.com=
/security/security-design/
Potential attacks Google is worried about:
- physical attacks at locations of data centers
- attacks that corrupt low level hardware booting the software stack
- internal attacks by developers/adversaries making malicious edits to sour=
ce code
- attacks by end users to access other users' data
- malicious firmware on storage devices
- attacks exploiting vulnerabilities in web apps
- phishing for employee credentials

</pre></li>

<li><pre class=3D"student-text">Lecture 2: Question answer by Samuel Gruett=
er


Question:=20

As you are reading this paper, think about what attacks Google is trying to=
 prevent with each of the security measures described in this document. Sub=
mit a list of potential attacks that Google is worried about, approximately=
 1 per subsection in the document.


Answer:

Security of Physical Premises
- The attacker enters a data center and physically damages or removes hardw=
are.

Hardware Design and Provenance
- An attacker working for a hardware vendor builds backdoors into the hardw=
are they sell to Google.

Secure Boot Stack and Machine Identity
- An attacker exploits bugs in an outdated BIOS and can trick a machine int=
o booting a modified operating system.

Service Identity, Integrity, and Isolation
- The attacker makes an API call to an internal Google service, pretending =
to be another Google service.
- The attacker uploads a malicious .doc file on Google Drive and triggers i=
ts conversion to html by looking at the preview in the browser, which can (=
if there's a security flaw in the .doc rendering code run by Google) attack=
 the server serving this request.

Inter-Service Access Management
- If attackers can hijack one service, they can use it to get access to oth=
er services (this can only partially be prevented by the measures described=
).

Encryption of Inter-Service Communication
- The attacker taps into a link between two data centers.

Access Management of End User Data
- An attacker gets access to one service and uses this to access data of an=
other service of arbitrary users (rather than just for some "compromised" u=
sers).

Encryption at Rest
- Malicious hard drive firmware leaks data it should write on the disk over=
 the network.
- The attacker picks up a hard drive from the trash and finds sensitive Goo=
gle data on it.

Deletion of Data
- The attacker deletes user data. (By only marking it as "scheduled for del=
etion", it's easier to recover from the attack without losing the data)

Denial of Service (DoS) Protection
- The attacker floods a service with so many requests that it becomes unava=
ilable for users.

User Authentication
- The attacker steals a cookie from the victim's machine and uses it to log=
in as the victim from another machine.

Safe Software Development
- Google developers write buggy code which can be exploited by an attacker.

Keeping Employee Devices and Credentials Safe
- Employees install software with backdoors on their machine.
- Employees keep running an old OS with security vulnerabilities on their m=
achine.

Reducing Insider Risk
- The attacker is a Google employee.

</pre></li>

<li><pre class=3D"student-text">Lecture 2: Security Architecture
2/12/18

Question
As you are reading this paper, think about what attacks Google is trying to=
 prevent with each of the security measures described in this document. Sub=
mit a list of potential attacks that Google is worried about, approximately=
 1 per subsection in the document.


Data Centers
- People actually going into these data centers to take or tamper with the =
physical drive where the data is stored
- People going to these data centers, pretending to be part of Google's loc=
al network to send or request for data
- People uploading their own software onto the data center machines to take=
 advantage of that hardware authentication

Services
- A Google service getting compromised, and then using that service to make=
 requests and compromising other services
- A Google employee maliciously editing the source code
- A Google employee maliciously accessing sensitive services
- People reading the data passed between internal services over the network=
 between data centers
- Person A pretending to be person B and sending a service request through =
another service to get person B's data

Data Storage
- People uploading malicious firmware onto the drives to get the data store=
d on there
- People collecting the discarded drive to restore and read the stored data
- People creating data dependencies and deleting data to cause a bug

Internet Comm
- People taking advantage of lesser-known Google services with worse front =
end defenses
- DoS attacks
- People pretending to be other users and logging in with their username an=
d password

Operational
- Google developers writing code that allows for XSS bugs
- People taking advantage of bugs in Linux or other software Google uses
- People pretending to be Google employees to modify code
- Google employees with malicious intentions
- Someone bypassing the initial authentication layer and running amok among=
st the infrastructure
- </pre></li>

<li><pre class=3D"student-text">List of types of security measures and corr=
esponding potential threat models:

1. Security of Physical Premises: Intruders breaking into data centers, and
planting malware on servers through the physical access to servers.

2. Hardware Design and Provenance: Malware targeting known flaws in public =
and
widely available server designs.

3. Secure Boot Stack and Machine Identity: Attacks that alter the system im=
age
that Google servers are running.

4. Service Identity, Integrity, and Isolation: Attacks where intruders inje=
ct
malicious code onto the server infrastructure posing as legit services, and
access sensitive data through RPC calls to other services running on the sa=
me
machine.

5. Inter-Service Access Management: Attacks where intruders compromise one
service (say, Gmail), and then access sensitive data through RPC calls to o=
ther
services on the compromised service's behalf (say, Google Plus). By limitin=
g the
methods on Google Plus that Gmail can access, the attack surface can be
minimized.

6. Encryption of Inter-Service Communication: Attacks that tap the inter-se=
rver
network paths, and extract sensitive data by eavesdropping on inter-service
traffic.

7. Access Management of End User Data: Attacks that compromises one service=
, and
in turn gains access to all users' data by making requests on behalf of the
compromised service. This measure limits the number of users affected by

8. Encryption at Rest: Attacks that gain unauthorized access of disk data
storage through exploits to the disk's firmware.

9. Deletion of Data: Attacks where the intruder gains access to a user's
account, and initiates an account deletion on the user's behalf.

10. Google Front End Service: Attacks that exploit incorrectly configured H=
TTPS
settings or the use of out-of-date SSL cryptographic algorithms to gain
unauthorized access.

11. Denial of Service (DoS) Protection: Attacks that initiate a huge amount=
 of
automatic traffic to Google services, in order to overflow its request capa=
city.

12. User Authentication: Attacks where intruder gains the password of the u=
ser,
and tries to access information using that credential from a remote device.

13. Safe Software Development: Attacks that target common security deficien=
cies
in coding or known flaws in open-source libraries.

14. Keeping Employee Devices and Credentials Safe: Attacks where the intrud=
er
first gains access to a employee device, and then uses the internal credent=
ials
stored therein to access sensitive data in other Google services.

15. Reducing Insider Risk: Attacks based on an employee using his/her inter=
nal
access to gain access to inappropriate data.

16. Intrusion Detection: An overall monitoring strategy that involves monit=
oring
of all types of attacks mentioned above.
</pre></li>

<li><pre class=3D"student-text">Miranda McClellan - Lec. 1

As you are reading this paper, think about what attacks Google is trying to=
 prevent with each of the security measures described=20
in this document. Submit a list of potential attacks that Google is worried=
 about, approximately 1 per subsection in the document.

1. Secure Low Level Infrastructure=20
Here, the number of employees with access to the data centers or physical m=
achines is very low to prevent attacks from malicious insiders/employees, a=
nd in the case of an inside job, quick detection of the user.=20
The buildings are protected by barriers to prevent hardware theft or damage=
 by intruders.
Much of the hardware is custom designed by Google, to prevent security flaw=
s from outsider vendors from compromising Google's security.=20
Google's design for secure server booting protects against the running of m=
alicious firmware that could then spread to other machines on the local net=
work in data centers, and to detect compromised or out-of-date machines qui=
ckly.=20

2. Secure Service Deployment
The fact that the infrastructure does not assume trust between services run=
ning isolates possible security flaws in one application from affecting ano=
ther or the server it runs on.=20
The use of service crypto credentials ensures that no malicious user can po=
se as a Google service to obtain user's private information.=20
Encrypting the inter-service communication ensures secure communication eve=
n if the network or end device is compromised.=20
"End User Permission Ticket"s further limits access to end user's informati=
on and ensures that if one end user's account is compromised, the adversary=
 cannot then easily access any other user's information.=20

3. Secure Data Storage
Data is encrypted before being written to storage to protect data against c=
ompromised hardware or firmware.=20
Devices are wiped clean or destroyed before decommission to prevent outside=
rs or malicious workers from accessing the data or any information on the e=
ncryption system used.=20

4. Secure Internet Communication
A private IP space prevents adversaries outside the LAN from knowing the pu=
rpose of specific machines and defends against DoS attacks.=20
DoS Protection allows Google to identify and block adversaries that hope to=
 slow or prevent Google services from running and reduce customer satisfact=
ion and Google's profit.=20
The user authentication protections does not simply ask for the same set of=
 questions (for which the answers may be publicly available), to prevent fr=
audulent log-ins.=20

5. Operational Security
Automated security checks and manual code reviews prohibit developers from =
unintentionally or maliciously introducing vulnerabilities to the infrastru=
cture.=20
The Vulnerability Rewards Program (bug bounty) reduces the likelihood that =
hackers will try to work against Google by incentivizing their work with gu=
aranteed pay.=20
U2F protects against historically successful phishing attempts that might c=
ompromise an employee's account and give access to Google source code.=20
By extending their security beyond corporate LAN access to device and locat=
ion, Google ensures that someone who gains the access code to the LAN or a =
credential does not automatically obtain elevated permission. It also reinf=
orces good employee behavior from protected devices.=20

6. Securing the Google Cloud Platform
Within the virtual machine platform, the services run like services on the =
larger infrastructure w/ limited permissions to protect user's data from ot=
her malicious users trying to access stored data unethically.=20
To maintain the privacy of users' data from engineers or other employees, u=
sers' data is not accessed at will but only to provide them a service.=20

</pre></li>

<li><pre class=3D"student-text">Nichole Clarke
Lecture 2

As you are reading this paper, think about what attacks Google is trying to=
 prevent with each of the security measures described in this document. Sub=
mit a list of potential attacks that Google is worried about, approximately=
 1 per subsection in the document.

- breaking into data centers/accessing data from the centers
- spoofing of their servers + networking equipment of data centers
- other (compromised) systems/technologies being installed/run on the serve=
r
- IP spoofing
- spoofing of services
- malicious modification to source code
- open access to APIs for services, enabling anyone to acquire data
- compromised or tapped network
- spoofing of users/user credentials
- malicious disk firmware
- data from physical storage devices when leaving Google custody
- data being wiped or deleted in error or maliciously
- DoS attack via frontend/public IP
- malicious login attempts
- attacks due to bugs/vulnerabilities in infrastructure, applications, and =
open-sourced software used
- attacks due to devices used by employees which may have malware
- attacks due to employees with access to infrastructure + end user informa=
tion
- attacks from VMM services
- attacks due to unencrypted data from custom VM to VM traffic

</pre></li>

<li><pre class=3D"student-text">On-site server access
Malicious component providers
Denial of service attacks
Malicious employees
Identity theft
IP spoofing</pre></li>

<li><pre class=3D"student-text">Paper Reading Answers

Security of Physical Premises
An attacker physically enters a Google data center by spoofing the identity=
 of a trusted employee, and makes physical copies of sensitive data.

Hardware Design and Provenance
A malicious vendor of hardware components attempts to sell Google component=
s for machines that are engineered to have a backdoor, which the vendor can=
 use to access sensitive data.

Secure Boot Stack and Machine Identity
An attacker exploits a security vulnerability in an older version of a prog=
ram on the software stack, making machines that have not yet updated/machin=
es without the relevant security patch vulnerable.

Service Identity, Integrity, and Isolation
An attacker writes a malicious client which spoofs the identities of real G=
oogle services and in doing so is able to make requests to other internal G=
oogle services. The attacker is able to obtain sensitive data this way.

Inter-Service Access Management
A malicious individual joins Google as an employee, and attempts to access =
services beyond the scope of their role. They attempt to modify code in the=
se services using their general Google credential.

Encryption of Inter-Service Communication
An attacker intercepts traffic between services or data centers. If traffic=
 is not encrypted, the attacker may be able to gain access to sensitive dat=
a.

Access Management of End User Data
An attacker discovers that servers servicing requests between certain servi=
ces do not perform verification of end user credentials. This enables the a=
ttacker to make requests for data for arbitrary end users.=20

Encryption at Rest

Deletion of Data

Google Front End Service/DoS Protection
An attacker performs a DoS attack on a single Google service. If that singl=
e Google service is not appropriately linked to the GFE and load-balancing =
infrastructure, a sufficiently powerful attacker may take a service down.

User Authentication
An attacker guesses a password. Without other measures such as 2FA or addit=
ional challenges, an unknowing user=E2=80=99s Google account is compromised=
.

Safe Software Development
An inexperienced Google engineer pushes poor-quality code, introducing a se=
curity vulnerability which attackers can exploit.

Keeping Employee Devices and Credentials Safe
A Google employee is a victim of a phishing scam. An attacker gains access =
to their credentials and obtains sensitive data by spoofing their identity.=
.

Reducing Insider Risk
A malicious individual becomes an employee at Google in order to gain acces=
s to Google infrastructure. The individual then uses their employee credent=
ials to access sensitive data or intentionally introduce security vulnerabi=
lities.=20
</pre></li>

<li><pre class=3D"student-text">People physically breaking into data center=
s
People selling chips with malware
Kernels getting hacked
People infiltrating the network
Man in the middle attacks
Stale data being comprimised
DDoS
Phishing
XSS
Rouge employees
</pre></li>

<li><pre class=3D"student-text">Physical break ins at data centers
Faulty physical hardware=20
Rerouting servers to use out of date or unauthorized software stacks=20
Unauthorized services communicating with other google services
Services communicating with services they are not supposed to communicate w=
ith=20
Tapping into the network
Accessing any contact information no matter who the end user is
Fake end user credentials
Writing false data to storage
Removing data from a decomissioned storage device=20
Intentionally deleting data that should not be deleted=20
DoS attacks=20
Users impersonating other users on new devices
Intentionally or accidentally  coding xss vulnerabilities or other bugs int=
o web apps=20
Phishing attacks against employees=20
Employees attempting to access data that they should not have access to
</pre></li>

<li><pre class=3D"student-text">Physical error management:
- Bit errors in the physical hardware that may identify insecure devices as=
 secure
- Physical tampering of the datacenter
- OS memory access errors - data areas overlap onto instruction memory area
- Separation of privileges at kernel level
- Bug fixes in future versions that may not yet be available in current ver=
sions - hence need for regular updates

User authentication:
- Denial of Service attacks
- Imposter attacks - hence need for identity verification
Confidentiality and integrity of messages transferred via RPCs
- Code tampering by insiders or individual engineers
- Access/ user identity and privilege management - unauthorized users canno=
t get any random user=E2=80=99s data or information - user permission ticke=
ts also achieve this

Secure communication and storage:
- Encryption (both at network and storage level) ensures confidentiality an=
d the inability to tamper with data
- Device wiping prevents information leaks that may affect forward secrecy
- Scheduled deletion prevents loss of data and recovery issues that may ari=
se from it
- DDoS prevention ensures availability of resources
- TLS termination prevents reuse of old credentials from persistent connect=
ions
- Many layers of authentication prevent simple password guessing attacks

Safe software development:
- prevents cross-side scripting errors
- constant monitoring prevents man-in-the-middle attacks
- constant checks prevents risks from existing employees with administrativ=
e access</pre></li>

<li><pre class=3D"student-text">Possible Attacks

Low-level Infrastructure:
 - adversary breaking in to a data center and stealing a physical machine (=
or pretending to be a worker, etc.)
 - adversary incorporating rogue hardware/device into the infrastructure
 - adversary incorporating rogue software used for machine booting (or outd=
ated Google software with known security bug)

Service Deployment:
- adversary pretending to be a Google service and communicate with other se=
rvices
 - adversary tapping into the network and having access to RPC traffic
=20

 Data Storage:
 - adversary getting access to old storage devices to access data
 - adversary getting access to user account and maliciously deleting their =
data

Internet Communication:
 - DoS atttacks
 - adversary compromising a user account

Operational:
 - adversary taking advantage of security bugs in source code (e.g. XSS att=
acks on web apps) or open-souce external libraries such as KVM
 - adversary compromising employee credentials through phishing
 - insider attacks



</pre></li>

<li><pre class=3D"student-text">Possible Attacks:
- Someone breaking into a Google data center
- Someone bugging a component used in Google hardware
- A software update introduces a security vulnerability which someone explo=
its
- A Google employee from making malicious changes to code
- Someone taps into the network and can watch the traffic
- Someone tries to make a network request for another user's data
- Adversary attains a hard drive that Google tries to throw out and gains d=
ata from it
- Denial of Service attacks
- XSS attacks
- Phishing attacks on Google employees
- A Google employee trying to steal data</pre></li>

<li><pre class=3D"student-text">Possible Attacks:

1. IP spoofing
2. Man in the middle attacks
3. Adversaries changing the source code
4. Adversaries running code on Google services that is malicious
5. Employees trying to see restricted information
6. Adversaries trying to access information about other users
7. Adversary trying to view persisted data
8. DOS attacks
9. Adversary logging into another user's account
10. Phishing attacks
11. Internal attacks from employees (accessing sensitive information)</pre>=
</li>

<li><pre class=3D"student-text">Possible attacks that Google could be worry=
ing about:
- Non-authorized people breaking into a data center
- Backdoors in third-party hardware chips
- An attacker loading unauthorized software onto Google server machines
- Adversaries modifying source code
- User supplied code (e.g. for Google App Engine apps) trying to modify oth=
er code running on the same machine
- Internal adversaries (e.g. Google engineers abusing their access)
- Adversaries trying to intercept information traveling over private WAN li=
nks
- Denial of service attacks
- Expired or otherwise incorrect certificates
- Protecting end users from adversaries trying to log in with the end user'=
s password
- Phishing (that compromises employees' accounts, etc.)</pre></li>

<li><pre class=3D"student-text">Potential Attacks
Physical Premises- Unauthorized/malicious people getting access to Google s=
ervers with sensitive information
Hardware Design and Provenance- Third-party vendors providing hardware whic=
h they can compromise
Secury Boot Stack and Machine Identity- People accessing/modifying Google i=
nformation on non-Google machines

Service Identity, Integrity, and Isolation- Someone running a service which=
 has access to all servers and hoards information
Inter-Service Access Management- Someone running an unauthorized/malicious =
service which can steal information from other services
Encryption of Inter-Service Communication- Someone gathering sensitive info=
rmation by monitoring data sent over the network
Access Management of End User Data- A user sending a request to get informa=
tion about other users

Encryption at Rest- Someone getting access to a Google server's physical st=
orage
Deletion of Data- Malicious person mass-deleting user information, leading =
to widespread data loss

Google Front End Service- Someone expoliting a vulnerable Google web servic=
e due to lack of adherence to standard security protocol
DoS Protection- Someone taking down Google web services by sending a ton of=
 requests
User Authentication- User logging in to someone else's account

Safe Software Development- Someone exploiting an XSS(or the like) vulnerabi=
lity on a Google website and injecting malicious code to collect user infor=
mation
Keeping Employee Devices and Credentials Safe- Phishing schemes to collect =
Google employee information
Reducing Insider Risk- Google employee compromising(knowingly installing a =
bug, releasing information) infrastructure they have access to
Intrusion Detection- Unauthorized personnel entering Google facilities or a=
ccessing Google infrastructure

GCP- basically all of the above

</pre></li>

<li><pre class=3D"student-text">Potential Attacks
* By designing their own servers and router that can make sure that there a=
ren=EF=BF=BDt known backdoors in the firmware
* Theft
* Hardware Replacement=20
* IP spoofing
* Self-upgraded user credentials
* Man in the middle attack
* User credential spoofing
* WAN sniffing
* Reverse engineering of decommissioned hardware=20
* Force data deletion
* Denial of Service attack=20
* Ping floods to external servers
* Cross site scripting
* Code injection
* Trojan Backdoors
* Social Engineering for password guessing

</pre></li>

<li><pre class=3D"student-text">Potential Attacks:
	Low Level Infrastructure:
		- Google has several physical barriers to prevent an attack from entering=
 the facility to access information
		- They have customized hardware to make it more difficult for attackers t=
o use attacks from unauthorized (external) devices
=09
	Secure Service Deployment:
		- Services are all separated with cryptographic credentials. This makes i=
t difficult for attackers to use a vulnerability in one service to take dow=
n another service
		- Changes to source code require a chain of approval before being deploye=
d. This makes it difficult for an inside adversary to inject malicious code=
 into the system. It also reduces the chances of a bug being deployed with =
the code.
=09
	Inter-Service Access Management:
		- Services check permissions of machines, other services, and employees t=
o determine who can access the service. This again minimizes the risk of a =
compromised service further compromising the system.
		- Access control groups also have a two party-control so that two people =
need to approve changes to a group before it is fully apporved. This preven=
ts one person from giving an adversary access to a group.
=09
	Encryption of Inter-Service Communication:
		- RPCs are encrypted to prevent attackers from accessing data through a h=
ole in the network's security
=09
	Access Management of End User Data:
		- End Users are given permission tickets which are specific to each user.=
 These tickets make sure that only information for a specified end user is =
accessed at any point in time. This prevents attackers from accessing other=
 accounts from another google account.
=09
	Secure Data Storage:
		- All stored data is encrpyted and any storage device that is being dispo=
sed must be wiped and approved or destroyed before being disposed. This pre=
vents adversaries from scraping data from storage devices.
		- When Data needs to be deleted, it is marked as scheduled for deletion. =
This reduces the severity of an accidental deletion. The actual deletion is=
 then left to service-specific policies
=09
	Secure Internet Communication:
		- All services go through the Google Front End to access the internet. Th=
is layer acts as a buffer which can deal with DoS attacks.
=09
	Operational Security:
		- Employees are incentivized to find bugs in security. This makes the inf=
rastructure more powerful.
		- Admins are monitored to prevent insider attacks
		- Employee devices are continually updated with security patches. This ma=
kes it harder for external adversaries to break into an employee's device.
		- Google runs software to detect potential intrusions. This makes it hard=
er for adversaries to stay hidden.
=09
	Securing the Google Cloud Platform:
		- The google cloud platform is secured through isolation and encryption. =
The isolation prevents unauthorized users from accessing a VM, and the encr=
yption makes it difficult to read intercepted messages.</pre></li>

<li><pre class=3D"student-text">Potential Attacks:

-Physical Attacks
-Malicious software or low-level firmware, including on hard drives
-Fake Remote Procedure Calls
-Attackers faking an identity; Google uses cryptographic IDs for many parts=
 of their security
-DOS attacks
-Accidental software security bugs
-Phishing
-Their own employees</pre></li>

<li><pre class=3D"student-text">Potential attacks
* A person physically breaking into a data center
* Servers/Google devices running incorrect software stacks
* Malicious modifications to source code
* Adversaries accessing Google services
* Adversaries accessing RPC calls
* Attacker attempting to retrieve user data
* Adversary obtaining physical Google device
* DoS (Denial of Service) attacks
* Adversaries pretending to be another user
* Phishing=20
* Insider sabotage=20
* Attacking network traffic
</pre></li>

<li><pre class=3D"student-text">Potential attacks Google is worried about:
1. Server centers being physically compromised.
2. Google insider employees sabotaging source code without a trace
3. Using one service to attack another service (Google tries to isolate the=
 services)
4. End user obtaining permissions to access data of all end users
5. Attackers gaining data from decommissioned hard drives an SSDs
6. Account hacking, user authentication
</pre></li>

<li><pre class=3D"student-text">Potential attacks include:
	- Randos walking in
	- Component vendors providing malicious components
	- Untrusted software being installed in the software stack
	- Imitation google service servers
	- Cross-team sabotage
	- Network being tapped
	- Attempting to obtain other user's data through gmail
	- malicious disk firmware
	- Accidental deletion
	- DoS attacks
	- Fake logins
	- Bugs in code
	- Immitating employees
	- Malicious employees
	- Intruders</pre></li>

<li><pre class=3D"student-text">Potential attacks that Google tries to prev=
ent

Jun Wan 991032935

Section 1: Secure Low Level Infrastructure
1. Gain physical access to Google's own data centers or third party ones.
2. Sell insecure low level device components to Google and then exploit it.
3. Let Google's machines boot out-of-date or even wrong &amp; malicious sof=
tware stack.

Section 2: Secure Service Deployment
1. Pretend to be an authorized personnel and corrupt Google's code.
2. Become a Google's employee and as an insider, modify codes which the adv=
ersary does not has access to.
3. Fake its identity and access services/data outside of the adversary serv=
ice.
4. Tap the network or compromise a network device to modify/understand inte=
r-service communication.

Section 3: Secure Data Storage
1. Attack on Google's disk to retrieve confidential data.
2. Get Google's discarded disks and retrieve confidential data which has no=
t been cleaned.
3. Unintentional deletions, whether customer-initiated or due to a bug or p=
rocess error internally.

Section 4: Secure Internet Connection
1. Attack using incorrect certificates and insecure communication.
2. Internet attacks such as denial-of-service.
3. Guess a user's password and hack into his account.

Section 5: Operational Security
1. Attack using risky software features, security bugs and 0-day exploits.
2. Compromise Google's employees=E2=80=99 devices and credentials.
3. Attacks from an insider.</pre></li>

<li><pre class=3D"student-text">Potential attacks:
- adversary stealing hard drives from data centers
- potential hardware vendors building a backdoor in their product
- adversary trying to boot their own software stack on a Google machine
- IP spoofing
- insiders making malicious changes to source code
- insiders changing access permissions
- adversary watching the network for sensitive data
- users trying to access data for other users
- malicious disk firmware
- adversary getting data from old discarded storage
- denial of service attacks
- phishing
- trying to log in as another user
- exploiting security bugs in the OS of employee machines
- insiders accessing user data</pre></li>

<li><pre class=3D"student-text">Potential attacks:=20

- (Security of Physical Premises) An attacker sneaking into the data center=
 and physically removing data by stealing a hard drive.=20
- (Hardware Design and Provenance) An attacker sells google malicious hardw=
are that can leak or corrupt Google=E2=80=99s data=20
- (Secure Boot Stack and Machine Identity) An attacker (perhaps an employee=
) trying to run an old version of software so that they can exploit a vulne=
rability or an attacker that sets up a server that pretends to be a part of=
 Google=E2=80=99s network in an attempt to steal information. These protect=
ions also just protect against mistakes that would result in Google acciden=
tally running vulnerable software.=20
- (Service Identity, Integrity, and Isolation) An employee tries to deploy =
a service using maliciously modified code.=20
- (Inter-Service Access Management) An attacker breaches the network and se=
ts up a service that steals data by hitting Google=E2=80=99s service=E2=80=
=99s APIs.=20
- (Encryption of Inter-Service Communication) An attacker listens in on net=
work traffic.=20
- (Access Management of End User Data) An employee tries to access end-user=
 data by using an Google service to hit another service=E2=80=99s API.=20
- (Encryption at Rest) Malicious disk firmware or an attacker physically tr=
ying to read data off a hardware.=20
- (Deletion of Data) An attacker introduces code into the system that cause=
s accounts or data to be deleted.=20
- (Google Front End Service) An attacker modifying the content in transit f=
rom Google back to the end User. Man in the middle attack?
- (Denial of Service (DoS) Protection) Denial of service attacks!
- (User Authentication) An attacker tries to login as another user after fi=
nding their username and password.=20
- (Safe Software Development) An employee tries to introduce a security vul=
nerability. Cross Site Scripting
- (Keeping Employee Devices and Credentials Safe) An external attacker tryi=
ng to impersonate an employee or get access to Google=E2=80=99s infrastruct=
ure by stealing an employee=E2=80=99s computer.=20
- (Reducing Insider Risk) Google employee trying to look at end-user data.=
=20
- (Intrusion Detection) Any attack that requires getting access to the netw=
ork.=20
</pre></li>

<li><pre class=3D"student-text">Q: As you are reading this paper, think abo=
ut what attacks Google is trying to prevent with each of the security measu=
res described in this document. Submit a list of potential attacks that Goo=
gle is worried about, approximately 1 per subsection in the document.=20

*Security of Physical Premises
Potential attack:
An adversary, potentially an unauthorized google employee, physically getti=
ng access to the servers (and thus making changes to them).

*Hardware Design and Provenance
Potential attack:
Malware in the hardware used that compromises security.

*Secure Boot Stack and Machine Identity
Potential attack:
Some attack that compromises the operating system.

*Service Identity, Integrity, and Isolation
Potential attack:
One compromised service (with credentials validated) attacking or gaining i=
nformation about other services.

*Inter-Service Access Management
Potential attack:
This controls the access of trusted services. If a service turns rouge and =
becomes a hazard, their access can be taken away to protect other services.

*Encryption of Inter-Service Communication
Potential attack:
Attacks on the network such as monitoring traffic or reading the data.

*Access Management of End User Data
Potential attack:
An application or a google engineer gaining access to more user data than r=
equired, potentially PII, and then using it against the user.

*Encryption at Rest
Potential attack:
An attacker getting access to stored data and trying it read it.

*Deletion of Data
Potential attack:
An attacker or malware "deleting" the users data--the data can be recovered=
.

*Google Front End Service
Potential attack:
Not attack. This service provides a common front for all services with buil=
t in security features that all the services can benefit from without extra=
 effort.

*Denial of Service (DoS) Protection
Potential attack:
DoS attack

*User Authentication
Potential attack:
Attacker pretending to be a user and trying to gain access to their account=
.

*Safe Software Development
Potential attack:
Not attacks, but developer mistakes that leave the software with common/eas=
ily preventable security flaws.

*Keeping Employee Devices and Credentials Safe
Potential attack:
Attacker physically steals an employee's device and uses saved credentials =
to log in as them. Or malware gets installed into the device that can do th=
e same.

*Reducing Insider Risk
Potential attack:
An employee turning against the corporation.

*Intrusion Detection
Potential attack:
Not attack. In case an attacker gets access to a device, this tries to dete=
ct if such a situation has occurred.
</pre></li>

<li><pre class=3D"student-text">Question: As you are reading this paper, th=
ink about what attacks Google is trying to prevent with each of the securit=
y measures described in this document. Submit a list of potential attacks t=
hat Google is worried about, approximately 1 per subsection in the document=
.

1. physical security to prevent direct hardware access intrusions, also lim=
its own employees in case of defect
2. custom hardware to prevent potential backdoors and faults of other compa=
nies
3. an attack where someone gains access to hardware and boots their own sof=
tware
4. use signatures to prevent other computers pretending to be google comput=
ers
5. code review to prevent employees from leaving a trail of security holes
6. encryption to protect against network listeners
7. gmail users acting as other gmail users
8. able to track all hardware and their status (needle in a haystack proble=
m)
9. adversary sending delete data requests
10. DDOSers trying to take down google
11. adversary trying to grab google server IP addresses
12. adversary trying to sign in to another account from another computer, y=
et still allowing users to sign in from another computer
13. other opensource software developers could write unsafe code that compr=
omises security
14. a big idea is limited scope that devices/users have to ensure no one ha=
s access to everything
15. insider attacks from employees (especially from those with lots of acce=
ss)</pre></li>

<li><pre class=3D"student-text">Quinn Magendanz

Lecture 2

As you are reading this paper, think about what attacks=20
Google is trying to prevent with each of the=20
security measures described in this document. Submit a=20
list of potential attacks that Google is=20
worried about, approximately 1 per subsection in the=20
document.

Security of Physical Premises
-Social engineering to gain access to servers
-Physical acquisition of data

Hardware Design and Provenance
-Firmware access on boards
-SPECTRE &amp; MELTDOWN

Secure Boot Stack and Machine Identity
-Preventing access by rooted kernal (using TPMs)

Service Identity, Integrity, and Isolation
-Insider backdoor insertion

Inter-Service Access Management
-Unauthorized access

Encryption of Inter-Service Communication
-Man in the middle

Access Management of End User Data
-Malicious RPC call

Encryption at Rest
-Prevent reading data from hardware (using=20
self-encrypting drives and computation on encrypted data)

Deletion of Data
-Data deletion and randsomware

Google Front End Service
-Spoofing HTTP

Denial of Service (DoS) Protection
-DoS

User Authentification
-Phishing &amp; password theft

Safe Software Development
-XXS
-Buffer Overflow
-Google found the SHA-1 collision with their Project
Zero team

Keeping Employee Devices and Credentials Safe
-Phishing=20
-Lateral movement from private to company=20
devices/accounts

Reducing Insider Risk
-Excessive privileges and access

Intrusion Detection
-Detect excessive computation or network signals to=20
identify infected machines

Securing the Google Cloud Platform (GCP)
-Prevent rooted virtual machine (using virtualized=20
secure hardware components)</pre></li>

<li><pre class=3D"student-text">Reading for Lecture 2
Botong Ma

Instructions: As you are reading this paper, think about what attacks Googl=
e is trying to prevent with each of the security measures described in this=
 document. Submit a list of potential attacks that Google is worried about,=
 approximately 1 per subsection in the document.

Potential Attacks

1. Secure Low Level Infrastructure:=20

	Here Google is worried about a physical hardware attack - for example, som=
eone sneaking in and stealing a server, or someone giving Google a device w=
ith a backdoor 		built-in and then having Google use it unknowingly.=20

	It is also worried about making sure that it is building the correct versi=
on of the software.=20

	In general, here Google is protecting against attacks that start from the =
very bottom- physical hardware, OS, etc.=20

2. Secure Service Deployment:=20
	One possible attack is a Google engineer putting malicious code in, or acc=
essing services that they aren't supposed to (if their account has been com=
promised).
=09
	Another attack is a compromised service trying to spread to other services=
 on the same machine.=20

	Another attack is a compromised network device that can tap into inter-ser=
vice communication, possibly replaying attacks, or taking data.=20
=09
	Another attack is a compromised service getting the private data of end us=
ers.

3. Secure Data Storage
	One attack that Google was worried about is an attacker gaining access to =
a used data storage device that still has sensitive information.=20

	Google is also worried about unintentional deletions.=20

4. Secure Interenet Communication
	Google is worried about DoS Attacks.=20
	For their users, Google is worried about an attacker stealing their accoun=
t.=20

5. Operational Security=20
	Google is worried about sophisticated phishing and insider attacks.=20

6. Google Cloud Platform
	One possible way things could go wrong is that the customer could be compr=
omised by DDoS attacks.
=09
</pre></li>

<li><pre class=3D"student-text">Secure Low Level Infastructure:

Security of Physical Premises: An attack that Google is worried about is at=
tackers physically breaking into their data centers and stealing the server=
s stored there, as this would possibly allow them access to the information=
 contained on the servers.

Hardware Design and Provenance: An attacker could build their own fake Goog=
le server and connect it to a network with real Google servers to try to ex=
change information with them. Google builds their own custom servers to pre=
vent this from happening.

Secure Boot Stack and Machine Identity: If an attacker got their hands on a=
 Google server they could run their own malicious software on it that may a=
ct normally but try to steal information at the same time. Google tries to =
prevent this by verifying that the machines are always running the correct =
software stack.

Secure Service Deployment:

Service Identity, Integrity, and Isolation: An attacker could run a malicio=
us application on Google's infrastructure and utilize Google's services in =
harmful ways. To stop this from happening they require all application run =
on their infrastructure to be verified and have proper credentials, otherwi=
se the applications cannot run.

Inter-Service Access Management: Access to services is controlled to preven=
t attackers from potentially abusing a service or utilizing a service for m=
alicious purposes. For example, an attacker could overload an api by making=
 excessive queries.

Encryption of Inter-Service Communication: An attacker could sniff the netw=
ork and try to steal sensitive data in transit, so Google encrypts communic=
ations between services so that it cannot be stolen.

Access Management of End User Data: An attacker could pretend to be someone=
 else using a service in an attempt to gain access to someone else's inform=
ation in another service.

Secure Data Storage:

Encryption at Rest: An attacker could introduce a storage disk with malicio=
us firmware to steal information, or they could try to steal a hard drive t=
hat Google used to use but is throwing out.

Deletion of Data: An attacker with access to a user's account could try to =
delete all of their data to prevent the user from accessing it, but Google =
has features for recovering data.

Secure Internet Communication:

Google Front End Service: An attacker could try to establish a malicious co=
nnection to a service.

Denial of Service Protection: Denial of Service attacks.

User Authentication: An attacker could figure out a user's username and pas=
sword and try to login to their account from the attacker's computer

Operational Security:

Safe Software Development: An attacker could exploit poorly written code to=
 gain access to a system or to break the application.

Keeping Employee Devices and Credentials Safe: An attacker could use a phis=
hing scheme to steal an employee's credentials then use them to login as th=
e employee.

Reducing Insider Risk: An employee could abuse their privileges to steal in=
formation they have access to.

Intrusion Detection: An attacker could break through security to gain acces=
s to sensitive information.
</pre></li>

<li><pre class=3D"student-text">Secure Low Level Infrastructure

Google=E2=80=99s extensive vetting of vendors and usage of in-house chips s=
hows that they are concerned about potential low level vulnerabilities whic=
h could compromise the rest of the stack.

Secure Service Deployment

Google=E2=80=99s application service infrastructure supports RPC authentica=
tion and cryptographic privacy for RPC in the network. This ensures that co=
mpromised services won=E2=80=99t be able to compromise other services.

Secure Data Storage

Data encryption at the application layer allows for isolation from other la=
yers in the case of compromises i.e. faulty firmware.

Secure Internet Communication

Google is worried about DoS attacks and in addition to the robustness of it=
s infrastructure deploys a variety of load balancers.

Operational Security

Google is also worried about insiders such as employees potentially exposin=
g sensitive information.

Securing GCP

User hijacking is another event Google would like to monitor and the centra=
lized authority service is used to do so. </pre></li>

<li><pre class=3D"student-text">Secure Low Level Infrastructure
- physical access/damage to data centers
- other machines connecting to local network
- malicious API calls to/from low-level management services
- corrupted software stacks

Secure Service Deployment
- malicious modifications to source code
- exploiting service APIs
- compromise of RPC data if network is tapped
- access of other user data

Secure Data Storage
- malicious disk firmware
- bug that deletes data

Secure Internet Communication
- DoS attacks
- drop/throttle associated traffic
- hacking of user accounts

Operational Security
- bugs introduced by developers
- phishing
- insider activity or other employee compromise
</pre></li>

<li><pre class=3D"student-text">Secure Low Level Infrastructure
	* Security of Physical Premises
		* This measure attempts to prevent physical intrusion into Google facilit=
ies. With access to the hardware an attacker could easily take down or intr=
ude Google's infrastructure.
	* Hardware Design and Provenance
		* Creating custom hardware shields Google from attacks on more common har=
dware. Since their hardware is custom it is much harder to an attacker to f=
ind vulnerabilities.
	* Secure Boot Stach &amp; Machine Identity
		* Secure Boot prevents attacks that hook into the boot process of a syste=
m. An attack of this type has unlimited access and is likely hard to detect=
. By tying hardware to software with hardware or firmware base signatures G=
oogle ensures that the system running on it's hardware is not malicious.
Secure Service Deployment
	* Service Identity, Integrity, and Isolation
		* Making services prove their identity when communicating with other serv=
ices helps to prevent a vulnerability in a single Google service acting as =
an attack vector into other services.
	* Inter-Service Access Management
		* An identity management interface builds on the previous protection by o=
nly allowing the services and engineers that need access, access. Otherwise=
, if everybody in Google had access than there are many more routes into a =
service. For example, an engineer working on a small project could gain acc=
ess to an otherwise highly secure and privileged system.
	* Encryption of Inter-Service Communication
		* If someone were to gain access to Google's network over which their ser=
vices communicate, they could see all information being passed over RPC. En=
crypting this traffic means that even if the network is compromised an atta=
cker does not have direct access to raw information on the network.
	* Access Management of End User Data
		* By providing access user-level access control, Google ensures that user=
s only have access to the data they should. Otherwise, a malicious user cou=
ld request information that belongs to another user.
Secure Data Storage
	* Encryption at Rest
		* Encrypting data before it is written to disk provides protections from =
potential hardware attacks. For example, if a disk were taken or compromise=
d to data on it is still encrypted.
	* Deletion of Data
		* Allowing for the deletion of data protects from attacks that access inf=
ormation that should not be where it is. For example, if a buggy service st=
ores important information in a less secure location it can easily be delet=
ed.
Secure Internet Communication
	* Google Front End Service
		* Routing all outside traffic through GFE ensures that every service conf=
orms to similar security practices. If this were not the case, than a servi=
ce lagging in security practices could be more vulnerable to outdated attac=
ks or DDOS attacks. This would then put the rest of Google infrastructure a=
t risk.
	* Denial of Service Protection
		* By monitoring all incoming traffic, Google can protect itself from Deni=
al of Service attacks where an attacker simply spams a service with request=
s and takes up a significant amount of processing time.
	* User Authentication
		* Authenticating users protects user information by simply ensuring a use=
r attempting to access a service or information is the person who should be=
.

Operational Security
	* Safe Software Development
		* Reviewing code itself for security holes helps protect many application=
s from common flaws such as the XSS vulnerabilities mentioned in the articl=
e.
	* Keeping Employee Devices and Credentials Safe
		* Ensuring access to employee devices is secure and the security of these=
 devices themselves, Google protects itself from attacks that go through em=
ployees and their hardware. For example, if somebody were to steal an engin=
eers phone.
	* Reducing Insider Risk
		* Monitoring employee activity helps protect from employees exploiting th=
eir privileged access.
	* Intrusion Detection
		* Reporting possible security problems allows for Google to quickly fix a=
nything that may get through the other security protections.
Securing the Google Cloud Platform
	* This section gives examples of how GCE utilizes Google's underlying secu=
rity infrastructure. For example, the GCE API utilizes GFE and therefore ga=
ins the advantages it brings such as DDOS detection. </pre></li>

<li><pre class=3D"student-text">Secure Low Level Infrastructure
1. unauthorized physical access to data center
2. backdoor in vendor hardware
3. backdoor in BIOS, bootloader, kernels, OS, etc.

Secure Service Deployment
4. fake application identity for inter-service communication
5. unauthorizied Google employee access to services
6. eavesdropping of RPC
7. malicious app requesting information on behalf of user

Secure Data Storage
8. unauthorized physical access to (decomissioned) hard drives
9. erroneous data deletion

Secure Internet Communication
10. unauthorized access to front-end service
11. denial-of-service attack
12. fake user identity

Operational Security
13. bugs introduced by developers
14. phishing targeted at Google employees
15. malicious Google employee
16. other types of intrusions
</pre></li>

<li><pre class=3D"student-text">Secure Low Level Infrastructure - Preventio=
n and detection of third parties tampering with server hardware.
Secure Service Deployment - Prevent the disruption of Google services.
Secure Data Storage - Prevent data corruption.
Secure Internet Communication - Prevent DoS attacks and identity theft.
Operational Security - Prevent non-employees from making changes to the cod=
e infrastructure.
Securing the Google Cloud Platform - Prevent thrid parties from disrupting =
GCP service to its clients.


</pre></li>

<li><pre class=3D"student-text">Secure low level infrastructure: real life =
datacenter invasions, network hacks, unreliability of third party vendors, =
out-of-date software
Secure service deployment: breaking out of the sandbox, overly lenient whit=
elist permissions, tapped networks
Secure data storage: untrustworthy employees, accidental deletion of data
Secure internet communication: DOS, man-in-the-middle, password stealing
Operational security: accidentally insecure employee code, phishing, malevo=
lent insiders, security breaches that go unseen due to the sheer size of Go=
ogle
Securing the Google Cloud Platform (GCP): sandbox escapes, KVM vulnerabilit=
ies
</pre></li>

<li><pre class=3D"student-text">Secure low-level infrastructure - a physica=
l intrustion could steal sensistive data and allow the attackers to try to =
decode it at their own leisure, in a favoriable environment. Additionally, =
they want to prvent purchasing hardware that is already compromise and cont=
ains malicious code.

Secure Service Deployment - a potential attack is a third party service pre=
tending it is a valid Google service and quering a trusting valid Google se=
rvice for data. They also explicitly want to prevent an adversary from list=
enting to their WAN traffic and getting information from it. With the ticke=
t concept, they have the possibility of isolating incidents - if a service =
is compromised, it doesn't mean it can compromise all of its users - it sti=
ll needs to get the user tickets in order to access information from other =
services.

Secure Data Storage - In case their hardware is infecteid (low-level checks=
 failed) they encrypt at application level. In case someone tried a DoS att=
ack against users by deleting user data, they have the 'scheduled for delet=
ion' system to reverse a deletion.

Secure Internet Communication - They protect against password compromises b=
y adding a second layer - they notify the user that their account has been =
accessed from a new location/device.

Operational Security - Protect against employee device theft, or against co=
mpromised employees with malicious intent.

Securing the Google Cloud Platform - protect against malicious client progr=
ams from accessing information about machine state, or other client VMs.=20




</pre></li>

<li><pre class=3D"student-text">Secure low-level infrastructure:

Security of Physical Premises: someone breaks into a Google server center p=
hysically and compromises the servers on premise.

Hardware Design and Provenance: The NSA tries to influence vendors to have =
a backdoor in the hardware Google is using so they can access protected dat=
a on the machine.

Secure Boot Stack and Machine Identity: someone exploits a bug in a un-upda=
ted version of the OS that is a public (or well-known) exploit that is not =
patched in that version, which is avoided by Google have auto-updates of th=
eir OS version.

Secure Service Deployment:=20

Service Identity, Integrity and Isolation: a malicious or ignorant engineer=
 makes a crucial security flaw that goes into production code.=20

Inter-service Access Management: a user accidentally gives a malicious serv=
ice access to a relatively unimportant part of the Google suite and this se=
rvice is able to access sensitive information that is present in all parts =
of the Google suite

Encryption of Inter-service Communication: an attacker intercepts communica=
tion between 2 different Google services=20

Access management of end user data: an attacker exploits certain services t=
hat do not properly check for end-user authentication, and gets data for ar=
bitrary users.
=20
Secure Data Storage:=20

Encryption at rest: Someone gets unauthorized access to a Google bigtable d=
atabase, but due to encryption at rest, can=E2=80=99t actually decode the d=
ata in the database.

Deletion of data: a person might believe that their private data is deleted=
, but an attacker might try to access it if it is not properly deleted and =
be able to be, unknown to the user.=20

Secure Internet Communication:=20

Google Front End Service/Denial of Service Protection: an attacker tries to=
 DOS Google=E2=80=99s servers and bring them down

User Authentication: an attacker gets a user=E2=80=99s password and usernam=
e, but without 2 factor authentication in play, is able to impersonate the =
user perfectly and get access to their data

Operational Security:=20

Safe Software Development: an unexperienced developer accidentally introduc=
es a security flaw in the code and this goes to production code

Keeping Employee Devices and Credentials Safe: an attacker impersonates the=
 credentials of a google employee and is able to access secure data through=
 this attack vector.

Reducing Insider Risk: a rogue employee tries to access private data of an =
ex-lover.=20

Intrusion Detection: an adversary is able to access the system without trig=
gering any alerts that the system has been compromised

</pre></li>

<li><pre class=3D"student-text">Security Low Level Infrastructure
  Security of Physical Premises
    * Threat: physically stealing data or getting direct access to server, =
swapping out machine
  Hardware Design
    * Threat: using hardware that has been tampered with
  Secure Boot Stack &amp; Machine Identity
    * Threat: tampering with BIOS, bootloader, kernel, OS

Secure Service Deployment
  Service Identity, Integrity, Isolation
    * Theats: IP spoofing, some backdoor inserted into code but can't find =
where
  Inter-Service Access Management
    * Threat: elevation of privilege, they use whitelisting of services/use=
rs to prevent this
  Encryption of Inter-Service Communication
    * Threat: man-in-the-middle attacks, intercepting messages
  Access Management of End User Data
    * Threat: data leak, accessing some other user's data

Secure Data Storage
  Encryption at Rest
    * Threat: data leak by someone finding or buying old hard drive
  Deletion of Data
    * Threat: maybe protecting against an unauthorized account deletion

Secure Internet Connection
  Google Front End
    * Threat: spoofing a website's identity
  DOS protection
    * Threat: Denial of Service attacks, they develop with this specific th=
reat in mind
  User Authentication
    * Threat: worried about spoofing user credentials

Operational Security
  Safe Software Development
    * Threat: worried about XSS, fuzzing, etc all of which can be tied back=
 to software bugs
  Keeping Employee Devices &amp; Credentials Safe
    * Threat: social engineering, pretending to be Google employee
  Reducing Insider Risk
    * Threat: privacy/data leak, malicious employee trying to get data
  Intrusion Detection
    * Threat: someone exploits a vulnerability but Google remains unaware f=
or a long time

Secure the Google Cloud Platform
  * Threats: DOS attacks, spoofing of a developer's credentials to get acce=
ss to their app, etc.
 =20
</pre></li>

<li><pre class=3D"student-text">Security measures and problems Google is tr=
ying to solve:
1. Someone may break into the datacenter and steal the hard drives for data=
.
2. Someone may connect an unauthenticated device that injects code to steal=
 data when connected to server machines.
3. Someone may forge a server to pretend it is an server in the datacenter.
4. Someone may want to steal the code behind the google service to use for =
their own good.
5. Someone may build their own service code to pretend to be a google servi=
ce to try to connect to a real google service to steal data.
6. Someone may build their own browser to operate google service while inje=
cting malicious code to steal data.
7. Someone may forge a credential of another user to access their data.
8. Someone may steal a hard drive google has used for its servers after goo=
gle has threw it away to try restoring the hard drive.
9. Someone may intersect service requests and change the package to send ma=
licidou code to the service to steal data.
10. Someone may spam a lot of requests to Google server to bring down the s=
erver.
11. Someone may try all the combination for the password to logging into a =
user account.
12. A Google employee may steal data by injecting bugs into Google service =
code.
13. Someone may steal a Google employee's login credentials to access core =
codes.
14. Someone may attack the Google platform from the virtual machines they d=
eployed on the Google cloud service.

Question: How does Google retain all the security measures when they do upd=
ates of the software or when they add in more services?</pre></li>

<li><pre class=3D"student-text">Security of Physical Premises
Google is trying to prevent unauthorized people from coming into data and p=
hysically stealing servers with sensitive information.

Hardware Design and Provenance
Prevent a malicious vendor from installing faulty hardware in a server to i=
nsert malware, for example.

Secure Boot Stack and Machine Identity
Google wants to prevent an attack in which a server becomes compromised thr=
ough downloading the wrong software stack or has out-of-date security softw=
are, causing a hole in the security system.

Service Identity, Integrity, and Isolation
Google here is using isolation to prevent attacks where a malicious service=
 could compromise other services on the same machine.

Inter-Service Access Management
This makes sure fraudulent engineers or services do not have access to or c=
an communicate with legitimate services.

Encryption of Inter-Service Communication
This prevents attacks where the attackers have compromised the network and =
are trying to answer RPCs with fraudulent information.

Access Management of End User Data
This prevents an attack where one user of a service has been compromised or=
 intends to do harm, for example a malicious user of Gmail, and tries to co=
mpromise other users using the same service.

Encryption at Rest
Prevents an attacker from obtaining and getting information from a thrown-o=
ut device that used to have secure information.

Deletion of Data
Prevents attackers from getting ahold of a user=E2=80=99s old data that mig=
ht still be relevant or sensitive.

Google Front End Service
This prevents a Google service from accessing a malicious server and leavin=
g itself to vulnerable to attaccks such as Denial of Service attacks.

Denial of Service (DoS) Protection
This is specially anticipating DoS attacks intending to overwhelm Google=E2=
=80=99s data centers.

User Authentication
This prevents malicious users from logging in as someone else to steal sens=
itive information from their Google-related accounts.

Safe Software Development
This is anticipating errors by software designers and programmers when they=
 try to build secure systems.

Keeping Employee Devices and Credentials Safe
This anticipates an attack where a malicious person is able to gain access =
to an employee=E2=80=99s device or credentials.

Reducing Insider Risk
This limits the damage a malicious person who is able to gain Google employ=
ment can inflict.

Intrusion Detection
This is a catch-all of possible intruders within Google infrastructure serv=
ices.















</pre></li>

<li><pre class=3D"student-text">Security of Physical Premises
	Keeping the physical premises secure prevents physical foreign intruders (=
actual thieves) from going into datacenters, and potentially stealing hardw=
are/data. This applies to potential employees too who might be tempted to p=
oach data.

Hardware Design and Provenance
	A malicious hardware vendor might install backdoors into their secure syst=
ems. Ensuring that all components are Google-vetted reduces the risks of po=
ssible backdoors.

Secure Boot Stack and Machine Identity
	Ensuring the validity of the boot stack reduces risks such as rootkits, wh=
ich might compromise the OS, bootup procedure,  or logon process of secure =
users. Such risks would normally be hard to rectify with traditional softwa=
re antiviruses.=20

Service Identity, Integrity, and Isolation
	Since services (from different users) may run on the same server, it's imp=
ortant that these services must be unable to communicate/see each other (at=
 least not through unofficial means). This is done through virtualization. =
Without the proper patches and precautions however (keeping software/hardwa=
re up to date, e.g. Spectre), a malicious program may be able to read the c=
ache, memory, or disk from other programs.=20

Inter-Service Access Management
	Services should be able to communicate with each other (if allowed by the =
author). With a two-party control system, one rogue engineer (or compromise=
d password) isn't enough to modify the access control system.

Encryption of Inter-Service Communication
	If communication between different datacenters is compromised perhaps beca=
use of a router, encrypting communication means that previously-unencrypted=
 traffic (e.g. HTTP) cannot be read.=20

Access Management of End User Data
	Using short-term tickets specific to a service and user safeguards against=
 many common attacks. For example, if Gmail requests contact information, t=
he ticket (used for validation) proves the request originated from the user=
 and has an expiration time. If the ticket was somehow intercepted by an ad=
versary, the ticket would only be valid for that one user and also shortly =
be unreplayable.=20

Encryption at Rest
	Having encrypted disks protects against low-level attacks such as maliciou=
s disk firmware (and perhaps if the disk gets physically stolen).

Deletion of Data
	Once data is supposed to be deleted, leaving it for too long eventually pr=
esents a security risk. Google's policy for data/account deletion balances =
convenience (accidental deletals) and security.=20

Google Front End Service
	N/A

Denial of Service (DoS) Protection
	DDoS attacks represent one of the common attacks on servers. Google's natu=
ral load balancing algorithms and throttling detection ensures that hosted =
servers do not have to write their own anti-DDos code or handle large malic=
ious traffic volumes.

User Authentication
	Phishing is one of the primary sources of account compromisation. Adding m=
ore variables to detect the result of these phishing attempts (e.g. cookie =
detection, location detection, etc) , as well as 2FA reduces the risk of ha=
ving the user's compromised credentials compromise the actual account.=20

Safe Software Development
	Major security breaches such as Heartbleed and Spectre may have huge ramif=
ications on program security. The sooner these breaches are discovered (by =
the good guys), the sooner fixes can be implemented. Google's active resear=
ch team and vulnerability rewards program speeds up the investigation of th=
ese breaches.=20

Keeping Employee Devices and Credentials Safe
	Having a compromised OS through installing malicious software can also lea=
d to the loss of user credentials through a keylogger. Keeping the OS up to=
 date, controlling available applications, and having antivirus software mi=
nimizes this risk.=20

Reducing Insider Risk
	Systems requiring two-party approvals prevent one malicious Google insider=
 from making changes to the infrastructure. Having two cooperative insiders=
 is less likely than having just one.

Intrusion Detection
	In the case of a major security breach (e.g. if a major service gets compr=
omised through a security bug), having automated network monitoring and mac=
hine intelligence allows security teams to quickly respond to deploy a resp=
onse. </pre></li>

<li><pre class=3D"student-text">Security of Physical Premises
- This prevents unauthorized personel from infiltrating into the data cente=
rs and stealing/manipulating the data.

Hardware Design and Provenance
- This prevents hackers from accessing the data center servers using their =
own (non-Google) devices.

Secure Boot Stack and Machine Identity
- This prevents the server machines from booting into a malicious software.

Service Identity, Integrity, and Isolation
- This prevents hackers from eavesdropping / masquerading as the sender / r=
ecipient when different components of the network communicate with each oth=
er.
- This also prevents hackers from injecting malicious code into Google App/=
Compute Engine that can affect other machines.

Inter-Service Access Management
- This prevents unauthorized users from accessing the service of a particul=
ar user.

Encryption of Inter-Service Communication
- This prevents hackers from eavesdropping / masquerading as the sender / r=
eceipient when different services communicate with each other.

Access Management of End User Data
- This prevents hackers from masquerading as the authorized user and making=
 (malicious) requests.

Encryption at Rest
- This prevents hackers from manipulating stored data or accessing it if th=
e data is not destroyed properly.

Deletion of Data
- This prevents hackers from gaining access to information that was suppose=
d to be deleted.

Google Front End Service
- This prevents hackers from using fake certificates to gain access.

Denial of Service (DoS) Protection
- This prevents hackers from carrying out DoS attacks.

User Authentication
- This prevents hackers from gaining access through stolen passwords / stol=
en recovery accounts / stolen phones etc.

Safe Software Development
- This prevents hackers from making use of exploits in the software.

Keeping Employee Devices and Credentials Safe
- This prevents employees from being attacked by the hackers, so non-author=
ized personel cannot access the privileges of the employee and use it for m=
alicious purposes.

Reducing Insider Risk
- This prevents a single employee with malicious intent to hack into the sy=
stem, or for an accidental mistake of one employee to break the system.

Intrusion Detection
- This is general intrusion prevention: when any intruder is quickly detect=
ed, additional measures can be made to halt the intrusion and prevent it fr=
om causing further damage.

</pre></li>

<li><pre class=3D"student-text">Security of Physical Premises - An outside =
attacker breaks into a Google datacenter to steal servers

Hardware Design and Provenance - A malicious hardware vendor sells servers =
to Google that "phone home" with sensitive data

Secure Boot Stack and Machine Identity - An attacker installs a rootkit on =
a Google server

Service Identity, Integrity, and Isolation - A malicious server pretends to=
 be running a Google service so that it can send fake requests to other ser=
vices

Inter-Service Access Management - A single badly-written service is comprom=
ised and used to steal data from other services

Encryption of Inter-Service Communication - An attacker sniffs packets in t=
ransit between datacenters

Access Management of End-User Data - A compromised server that one user has=
 logged into is used to steal every user's data

Encryption at Rest - Dumpster-divers steal hard drives thrown out by Google=
 to obtain sensitive data

Deletion of Data - Attackers steal old data that users thought they had era=
sed

Google Front End Service - Attackers MITM a Google service that doesn't pro=
perly check TLS certificates

DoS Protection - Attackers use a botnet to hammer Google with requests and =
crash their services

User Authentication - Attackers steal a user's password and try to log in a=
s that user from the attacker's computer

Safe Software Development - Attackers exploit XSS vulnerabilities in Google=
 services

Keeping Employee Devices and Credentials Safe - Attackers send phishing ema=
ils to Google employees to obtain passwords

Reducing Insider Risk - A malicious Google employee uses their access privi=
leges to steal user data

Securing the Google Cloud Platform - An attacker-controlled service on Goog=
le's Cloud Platform steals data from other services on the same machine
</pre></li>

<li><pre class=3D"student-text">Security of Physical Premises - Google is t=
rying to make sure no one can break into their data centers and security br=
each by physically getting their hands on important sensitive hardware

Hardware Design and Provenance - This is to prevent hackers to try to get i=
n by using devices that look like Google devices to gain access. By working=
 with trusted vendors they also make sure the hardware doesn=E2=80=99t have=
 any built in vulnerabilities

Secure Boot Stack and Machine Identity - By having each server machine hold=
 a specific identity, we protect against hackers who might try to pretend t=
o be a google server machine.

Service Identity, Integrity, and Isolation - Each service has an account id=
entity that will allow it to prove it=E2=80=99s legit when it makes RPCs. T=
his is to prevent attacks where villains may pretend to be a service.

Inter-Service Access Management- By restricting access to your service to a=
 few whitelisted services, this adds an additional level of security so tha=
t you need to be an authorized service to communicate with other services. =
Enemy services then have trouble getting access to other services.

Encryption of Inter-Service Communication- Encryption allows Google to prot=
ect against attacks that might be listening on the network when RPCs are se=
nt.

Access Management of End User Data- This protects against attacks where the=
 villain somehow got access to a service, it can=E2=80=99t access other ser=
vices (even when whitelisted) unless it presents a user permission ticket t=
hat shows the service is necessary at the current time.


Encryption at Rest- Protects the actual SSDs, so this will prevent villains=
 from reading from the SSDs or installing malicious malware on them.

Deletion of Data- Holding onto a copy of the data before deleting prevents =
a villain from deleting all the data at once.

Google Front End Service - protects against attackers who may come through =
TLS connections

DoS Protection - protects against DoS attacks

User Authentication - Protects against attackers who might get user=E2=80=
=99s passwords through phishing attacks

Safe Software Development - protects against security vulnerabilities in ac=
tual software google may use (like open source stuff) that attackers can ma=
nipulate to gain access

Keeping Employee Devices and Credentials Safe - Protects against more phish=
ing attacks, this time targeted on the employees. Also restricts access eve=
n if the villain does gain access.

Reducing Insider Risk - This discourages villains from potentially within g=
oogle, or maybe someone who accidentally gains access to something he/she s=
houldn=E2=80=99t have access to and then leaks it.

Intrusion Detection - This prevents against all potential attacks because i=
t allows Google to figure out when they=E2=80=99re being attacked and count=
er it.
</pre></li>

<li><pre class=3D"student-text">Security of Physical Premises - physical in=
trusions, theft, vandalism, etc.
Hardware Design and Provenance - adversaries knowingly or unknowingly provi=
ding insecure hardware (e.g. Spectre)
Secure Boot Stack and Machine Identity - malicious installs of a different =
OS image/bootloader/etc.
Service Identity, Integrity, and Isolation - unintended malicious changes t=
o code running on machines
Inter-Service Access Management - one compromised service maliciously gaini=
ng access to a separate service
Encryption of Inter-Service Communication - network sniffing
Access Management of End User Data - services requesting data for users the=
y're not authorized for (e.g. getting another person's contacts from your G=
mail)
Encryption at Rest - adversaries who gain access to decommissioned hard dri=
ves can't easily read them
Deletion of Data - adversaries deleting user data irreversibly
Google Front End Service - impersonation of services from adversaries
Denial of Service (DoS) Protectio - DoS attacks
User Authentication - adversaries using e.g. password guessing to gain acce=
ss to someone else's account
Safe Software Development - bugs from engineers
Keeping Employee Devices and Credentials Safe - e.g. Apple employee leaving=
 iPhone in a bar
Reducing Insider Risk - employees gone rogue
Intrusion Detection - active intrusion events
</pre></li>

<li><pre class=3D"student-text">Security of Physical Premises -- protection=
 against attackers gaining physical access to machines, e.g. an intruder en=
tering a data center

Hardware Design and Provenance -- protection against illegitimate devices a=
nd machines connecting to networks via Google=E2=80=99s data centers

Secure Boot Stack -- protection against intruders tampering with low-level =
components such as the BIOS, bootloader, kernel, and base OS system images

Service Identity, Integrity, and Isolation -- protection against unidentifi=
able servers making/receiving RPCs to clients and also against clients gain=
ing access to methods/data they are not meant to access

Inter-Service Access Management -- protection against unwanted identities f=
rom access a particular service as well as protection against unwarranted c=
hanges made to access control groups

Encryption of Inter-Service Communication -- protection against security at=
tacks mounted on the network (WAN) between data centers, e.g. via network t=
apping or a compromised network device

Access Management of End User Data -- protection against users unwarrantedl=
y requesting services on behalf of other users

Encryption at Rest -- protection against attackers making sense of and usin=
g data in case unwarranted access to data stored on the infrastructure; pro=
tection against attacks targeting lower levels of storage such as disk firm=
ware

Deletion of Data -- protection against accidental, unintentional, or malici=
ously-motivated deletes

Google Front End Service -- protection against attackers tampering with the=
 DNS name or with TLS connections to the service being run on Google Cloud

DoS protection -- protection against attackers mounting denial-of-service a=
ttacks at a service being run on Google Cloud

User Authentication -- protection against phishing and spoofing attacks

Safe Software Development -- protection against developers or attackers eit=
her intentionally or unintentionally introducing security bugs or vulnerabi=
lities to application code

Device and Credential Safety -- protection against phishing and spoofing at=
tacks targeting employees, especially those known to have certain accesses/=
privileges

Insider Risk Reduction -- protection against internal employees from misusi=
ng or overusing (both accidentally and/or with malicious intent) the admini=
strative accesses they have been granted

Intrusion Detection -- protection against an intruder being able to mount a=
n attack or proceed with long-lasting attacks; protection against large-sca=
le damage once an attack is detected
</pre></li>

<li><pre class=3D"student-text">Security of Physical Premises:
	- physical attacks involving stolen identification, etc
Hardware Design and Provenance:
	- malicious hardware/firmware
Secure Boot Stack and Machine Identity:
	- BIOS, bootloader, kernel vulnerabilities
Service Identity, Integrity, and Isolation:
	- compromise of one service resulting in compromise of all services
Encryption of Inter-Service Communication:
	- man-in-the-middle attacks
Access Management of End User Data:
	- obtaining more data from the user than was requested/allowed
Encryption at Rest:
	- physical compromise of storage
	- recovering deleted data from decomissioned drives
Google Front End Service:
	- DDoS attacks
User Authentication:
	- attackers logging in as other users
Safe Software Deployment:
	- attacks introduced from software bugs
Keeping Employee Devices and Credentials Safe:
	- attacks involving compromise of an employee
Reducing Insider Risk:
	- 'rogue' employees</pre></li>

<li><pre class=3D"student-text">Security of Physical Premises:=20
Prevent physical data center intrusion by unauthorized employees and other =
people.=20

Hardware Design and Provenance:
Prevent potential hardware security flaw and hardware backdoor.

Secure Boot Stack and Machine Identity:
Prevent compromised servers running malicious software stack.
Prevent services running on an unauthorized server.
Prevent attacks using unpatched security issues.

Service Identity, Integrity, and Isolation:
Prevent the compromise of one service affects other services.
Prevent Google's employees gain unauthorized access.

Inter-Service Access Management:
Prevent attacks from the inside like malicious code or bugs have access to =
sensitive data.

Encryption of Inter-Service Communication:
Prevent sophisticated adversaries who may be trying to tap private WAN link=
s between data centers.

Access Management of End User Data:
Prevent bugs that show other users' sensitive data or attackers use API to =
request other users' sensitive data.

Encryption at Rest:
Prevent low-level attacks to disks to get data.

Deletion of Data:
Prevent bugs or misoperations that delete data.

Google Front End Service:
Prevent man-in-the-mid attacks and other attacks trying to read the data wh=
en they are routing to users on the Internet.

Denial of Service (DoS) Protection:
Denial of service.

User Authentication:
Prevent attackers trying to gain access to users' accounts.

Safe Software Development:
Reduce high-risk software bugs and insecure settings.=20

Keeping Employee Devices and Credentials Safe:
Prevent attackers from phishing employees.

Reducing Insider Risk:
Reduce employees' access to users' sensitive data.

Intrusion Detection:
Detect intrusions that bypass other security mechanisms.=20
</pre></li>

<li><pre class=3D"student-text">Security of Premises - Basic physical intru=
sion, such as someone trying to break into a data center to steal a hard dr=
ive with sensitive information.

Hardware Design and Provenance - Supply chain attacks, like a router manufa=
cturer that has a pre-inserted backdoor baked into a chip to spy on network=
 traffic.

Secure Boot Stack and Machine Identity - An advanced insider attack where a=
n attacker working at Google tries to extract data through low level means,=
 such as flashing a malicious BIOS.

Service Identity, Integrity, and Isolation - Inside this section, sandboxin=
g could prevent a user-uploaded file containing an exploit from affecting o=
ther services besides the one it=E2=80=99s uploaded to.

Inter-Service Access Management - This could prevent a privilege escalation=
 attack mounted through API access.

Encryption of Inter-Service Communication - Encryption can prevent adversar=
ies snooping on data center to data center links from gathering any useful =
information.

Access Management of End User Data - This technique protects against potent=
ial attacks where an adversary hijacks a user-approved session.=20

Encryption at Rest - Even if someone does break into the premises and steal=
 a hard drive (see Security of Premises), this will make it exponentially m=
ore difficult for the attacker to get any useful data off the drive.

Deletion of Data - This ensures that an attacker (or other interested party=
) can=E2=80=99t recover user data from other Google services once a central=
ized deletion request has been carried out.

User Authentication - Allows for a bunch of potential protections; for inst=
ance, Security Keys allow two-factor authentication to protect against atta=
cks where an adversary might have control over your phone.

Safe Software Development - Protects against some flaws unintentionally int=
roduced during the development process.
</pre></li>

<li><pre class=3D"student-text">Security of physical premises: A group of r=
obbers break in and steal a server.

Hardware design and provenance: A vendor provides hardware components with =
a built-in backdoor.

Secure boot stack and machine identity: An adversary puts a USB stick in on=
e of the servers and loads a new OS to the server on reboot, or the server =
gets flashed a new (malicious) OS remotely.

Service identity, integrity, isolation: A Google employee maliciously tries=
 to commit insecure code to the codebase.

Inter-service access management: Outsiders gain access to admin panels and =
services that only employees should be able to access.

Encryption of inter-service communication: Data being sent between Google s=
ervices (e.g. Contacts and Gmail) is sniffed.

Access management of end user data: An anonymous adversary tries to make a =
large number RPCs per second to one service, slowing down the service.

Encryption at rest: Someone takes a hard drive from the dumpster outside Go=
ogle and reads the data on it.

Deletion of data: Someone gains access to a user account, makes a copy of t=
heir data, then deletes it from Google. They then demand $$ from the user f=
or their data back.

Google front end service: A MITM TLS protocol downgrade attack allows the d=
ata being transported to be sniffed.

Denial of service protection: an adversary sends a large number of requests=
 to one Gmail server, making it very slow and unusable by others.

User authentication: An adversary steals someone's username and password an=
d uses some other computer to log in to the stolen account.

Safe software development: A Google employee uses an insecure module as a d=
ependency in a project, which gives an adversary access to some information=
.

Keeping employee devices and credentials safe: An adversary uses known secu=
rity issues in a Google employee's home computer OS/browser to get informat=
ion from Google.

Reducing insider risk: An evil Google employee takes action on their grand =
plan without anyone noticing.

Intrusion detection: Someone from an unfamiliar IP at a time outside normal=
 hours sends a suspicious request over the network.
</pre></li>

<li><pre class=3D"student-text">Some potential attacks that Google is worri=
ed about are:
- physical attack to enter a Google data structure
- faulty components=20
- booting a malicious software stack=20
- IP spoofing
- a service that accesses sensitive information from other running services
- tapping a network between services
- stealing another user's data from another service
- malicious disk firmware
- attempt to delete data
- denial of service attack
- posing as a user by guessing or discovering their login credentials
- cross-site scripting
- fuzzers
- phishing attacks
- employees within the company trying to perform malicious acts or access t=
hings they should not</pre></li>

<li><pre class=3D"student-text">Submit a list of potential attacks that Goo=
gle is worried about, approximately 1 per subsection in the document.

Secure Low Level Infrastructure:
- To protect the machines in its data centers from being stolen or damaged
- To ensure that the machines are booting the correct software stack.

Secure Service Deployment:
- To protect its services against service identity spoofing, source-code mo=
difications, wrong permissions
- To ensure data privacy and integrity of RPC data

Secure Data Storage:
- To protect user data against malicious disk firmware, data modifications =
and delections

Secure Internet Communication:
- To protect against denial of service, man-in-the-middle, and phising atta=
cks.
- To provide reliable user authentication

Operational Security:
- To protect against XSS attacks, security bugs in source code, phising of =
Google employee's credentials, insider risks
- To respond to attacks in a timely manner

Securing the Google Cloud Platform (GCP):
- To protect against bad access controls, denial of service attacks, and ma=
n-in-the-middle attacks.
</pre></li>

<li><pre class=3D"student-text">Submit your answer for each lecture's paper=
 question via the submission web site in a file named lecn.txt

As you are reading this paper, think about what attacks Google is trying to=
 prevent with each of the security measures described in this document. Sub=
mit a list of potential attacks that Google is worried about, approximately=
 1 per subsection in the document.

++ Potential attack vectors prevented by Google security measures as well a=
s notes and background gleaned from the document.  Below is a TL;DR with ju=
st the attack vectors listed. ++

THOUGHTS + POTENTIAL ATTACK VECTORS BY SECTION
=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D
Secure Low Level Infrastructure
	- Security of Physical Premises
		- Protects against physical attacks against their equipment such as the i=
ntroduction of unapproved, potentially malicious hardware/software as well =
as the theft of Google-owned drives and systems
	- Hardware Design and Provenance
		- Ensures that the most basic part of their system is trusted and free of=
 misbehaviors (be they malicious, such as a hardware trojan added during de=
velopment, or more benign malfunctions caused by poor design/construction)
		- By having a root of trust at the hardware level, Google can more accura=
tely keep track of devices on their network and can detect additions/subtra=
ctions to their network
	- Secure Boot Stack and Machine Identity
		- Since Google follows good hardware design and provenance procedures (ab=
ove), it can trust its hardware to securely carry out the boot process.  "w=
e root the trust of the boot chain in either a lockable firmware chip, a mi=
crocontroller running Google-written security code, or the above mentioned =
Google-designed security chip.""
		- This prevents bootkits from persisting through OS reinstallation as wel=
l as the addition of other bits of (potentially malicious) code into the bo=
ot process
		- "Each server machine in the data center has its own specific identity t=
hat can be tied to the hardware root of trust and the software with which t=
he machine booted."
			- Ensures that even if another computer makes it into the system, it wou=
ld have to find a way to spoof the expected requisite identity information =
before it can speak to everything else (without getting caught)
Secure Service Deployment
	- Service Identity, Integrity, and Isolation
		- Cryptographic credentials per service ensures that identities are absol=
ute (as long as the crypto is good/keys aren't stolen) and, as such, servic=
es can't masquerade as one another or access comms not meant for specifical=
ly for them
		- "code reviews require inspection and approval from at least one enginee=
r other than the author"
			- Reduces both accidental bug introduction as well as obviously-maliciou=
s code injection.  Naturally requires the reviewer to be throrough, careful=
, and trusted
		- "...current and past versions of the service are auditable..."=09
			- Patching a service doesn't destroy the previous versions.  Can trace b=
ad code back to source.=20
		- "sandboxing techniques"
			- Protects services from each other.  Even if one becomes compromised or=
 is found to be malicious, it can't affect others on the same server.
		- "As an extra security boundary, we enable very sensitive services, such=
 as the cluster orchestration service and some key management services, to =
run exclusively on dedicated machines."
			- Since sandboxes can be broken out of, these services have to be treate=
d extra carefully to ensure that they're safe.
	- Inter-Service Access Management
		- "a service may want to offer some APIs solely to a specific whitelist o=
f other services"
			- Whitelist (as opposed to blacklist) to avoid any unforseen services sn=
eaking in
			- Limit access to APIs in case they provide the ability to read/write se=
nsitive data
		- "Google engineers accessing services are also issued individual identit=
ies"
			- Prevents random employees from access potentially sensitive informatio=
n that they don't need access to.  Also can be used to track who has access=
ed what in case of a post-mortem being required
	- Encryption of Inter-Service Communication
		- "cryptographic privacy and integrity for RPC data on the network"
			- cryptographic privacy prevents snoops from reading other processess' p=
otentially sensitive information
			- cryptographic integrity ensures that the message being recieved is the=
 same message that was sent.  Prevents MitM-type injection attacks
	- Access Management of End User Data
		- "An end user login is verified by the central identity service which th=
en issues a user credential, such as a cookie or OAuth token, to the user=
=E2=80=99s client device."
			- Tying the cookie/OAuth token to the device ensures that even if a cook=
ie gets stolen by an adversary, it can't be used to impersonate the victim
Secure Data Storage
	- Encryption at Rest
		- Encrypting data before it reaches the physical storage devices protects=
 against malicious firmware on the the hardware devices
		- Ensures that even if someone breaks into a datacenter and makes off wit=
h tons of harddrives, the data on them remains secure (as long as the passw=
ord and crypto are good)
		- Cleaning disks before reliquishing custody protects against adversaries=
 from potentially recoving sensitive information
		- Destroying disks that failed wiping procedures on-site protects against=
 malicious third-party destruction services
	- Deletion of Data
		- This one seems to favor usability over security.  Rather than flat-out =
deleting data, things are marked as "scheduled for deletion" which insures =
against accidental deletion.  Services then actually delete as their policy=
 dictates
Secure Internet Communication
	- Google Front End Service
		- "ensures that all TLS connections are terminated using correct certific=
ates"
			- Prevents adversaries from slipping through with old/incorrect/expired =
certs.
		- Any services that want to speak to the more global internet must go thr=
ough a GFE. =20
			- Ensures that you only need to do external comms securely once (at the =
GFE).  Everything else then uses the internal RPC secure comms giving you l=
ess room for erroneous implementations.
	- Denial of Service (DoS) Protection
		- Load balancers smartly detect DoS attacks and take actions to throttle =
them.  Protects against denial of Availability, one of the three main tenen=
ts of computer security.
	- User Authentication
		- "intelligently challenges users for additional information based on ris=
k factors such as whether they have logged in from the same device or a sim=
ilar location in the past."
			- Balancing privacy and security.  Being nagged when logging in from a n=
ew device is annoying, but not nearly as annoying as someone stealing your =
credentials and logging in in your stead.
		- "second factors such as OTPs or phishing-resistant Security Keys"
			- Protects against a user's password being compromised
		- "Universal 2nd Factor (U2F) open standard"
			- Protects against poor implementations of 2-factor auth
Operational Security
	- Safe Software Development
		- Generally protecting against all sorts of common coding bugs that slip =
in during the normal software development lifecycle
			- XSS, SQLi, Buffer Overflows, Use-after-free, etc. etc. etc.
		- Automatic checks beat humans through sheer scale of testing
		- Human checks beat automatice scanners by being capable of higher-level =
thought and able to reason through more insidious bugs
		- Vulnerability rewards (bug bounties) turn potential hackers into anothe=
r review layer, finding things that slip through other means
		- 0-day research (Project Zero) finds potential bugs in services that Goo=
gle and its users use, protecting against companies with less-stringent sof=
tware development standards
	- Keeping Employee Devices and Credentials Safe
		- "mandatory use of U2F-compatible Security Keys"
			- Protects against phishing attacks
		- "operating system images for these client devices are up-to-date"
			- Protects against n-day exploits being thrown around in the wild
		- "application-level access management controls"
			- Being on the LAN doesn't grant everyone access to everything.  Protect=
s against malicious insider as well as malicious people who find their way =
inside the trusted boundary
	- Reducing Insider Risk
		- "eliminate the need for privileged access for particular tasks"
			- Follows least-privilige model.  Protects against malicious insider usi=
ng administrative access to view/edit/steal sensitive data
		- "access to end user information can be logged through low-level infrast=
ructure hooks"
			- Even if something happens, Google could have a log of it.  Makes traci=
ng and attribution possible after-the-fact.  Acts as a deterrent before-the=
-fact
	- Intrusion Detection
		- ML + rules-based monitoring prevents against unauthorized access as wel=
l as unexpected usage of authorized accesses
Securing the Google Cloud Platform (GCP)
	- Describes the ways the above security decisions affect a real service, t=
he GCP.
	- "further hardened our particular implementation of KVM"
		- Again following model of least-privilege, Google protects against poten=
tial compromise of KVM executables from causing full compromise of entire s=
ystem.


LIST OF POTENTIAL ATTACKS ONLY
=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D=3D=3D=3D
- Protects against physical attacks against their equipment such as the int=
roduction of unapproved, potentially malicious hardware/software as well as=
 the theft of Google-owned drives and systems
- Ensures that the most basic part of their system is trusted and free of m=
isbehaviors (be they malicious, such as a hardware trojan added during deve=
lopment, or more benign malfunctions caused by poor design/construction)
- By having a root of trust at the hardware level, Google can more accurate=
ly keep track of devices on their network and can detect additions/subtract=
ions to their network
- Since Google follows good hardware design and provenance procedures (abov=
e), it can trust its hardware to securely carry out the boot process.
- This prevents bootkits from persisting through OS reinstallation as well =
as the addition of other bits of (potentially malicious) code into the boot=
 process
- Ensures that even if another computer makes it into the system, it would =
have to find a way to spoof the expected requisite identity information bef=
ore it can speak to everything else (without getting caught)
- Cryptographic credentials per service ensures that identities are absolut=
e (as long as the crypto is good/keys aren't stolen) and, as such, services=
 can't masquerade as one another or access comms not meant for specifically=
 for them
- Reduces both accidental bug introduction as well as obviously-malicious c=
ode injection.  Naturally requires the reviewer to be throrough, careful, a=
nd trusted
- Patching a service doesn't destroy the previous versions.  Can trace bad =
code back to source.=20
- Protects services from each other.  Even if one becomes compromised or is=
 found to be malicious, it can't affect others on the same server.
- Since sandboxes can be broken out of, these services have to be treated e=
xtra carefully to ensure that they're safe.
- Whitelist (as opposed to blacklist) to avoid any unforseen services sneak=
ing in
- Limit access to APIs in case they provide the ability to read/write sensi=
tive data
- Prevents random employees from access potentially sensitive information t=
hat they don't need access to.  Also can be used to track who has accessed =
what in case of a post-mortem being required
- cryptographic privacy prevents snoops from reading other processess' pote=
ntially sensitive information
- cryptographic integrity ensures that the message being recieved is the sa=
me message that was sent.  Prevents MitM-type injection attacks
- Tying the cookie/OAuth token to the device ensures that even if a cookie =
gets stolen by an adversary, it can't be used to impersonate the victim
- Encrypting data before it reaches the physical storage devices protects a=
gainst malicious firmware on the the hardware devices
- Ensures that even if someone breaks into a datacenter and makes off with =
tons of harddrives, the data on them remains secure (as long as the passwor=
d and crypto are good)
- Cleaning disks before reliquishing custody protects against adversaries f=
rom potentially recoving sensitive information
- Destroying disks that failed wiping procedures on-site protects against m=
alicious third-party destruction services
- Rather than flat-out deleting data, things are marked as "scheduled for d=
eletion" which insures against accidental deletion.  Services then actually=
 delete as their policy dictates
- Prevents adversaries from slipping through with old/incorrect/expired cer=
ts.
- Any services that want to speak to the more global internet must go throu=
gh a GFE.
- Ensures that you only need to do external comms securely once (at the GFE=
).  Everything else then uses the internal RPC secure comms giving you less=
 room for erroneous implementations.
- Load balancers smartly detect DoS attacks and take actions to throttle th=
em.  Protects against denial of Availability, one of the three main tenents=
 of computer security.
- Balancing privacy and security.  Being nagged when logging in from a new =
device is annoying, but not nearly as annoying as someone stealing your cre=
dentials and logging in in your stead.
- Protects against a user's password being compromised
- Protects against poor implementations of 2-factor auth
- Generally protecting against all sorts of common coding bugs that slip in=
 during the normal software development lifecycle
- XSS, SQLi, Buffer Overflows, Use-after-free, etc. etc. etc.
- Automatic checks beat humans through sheer scale of testing
- Human checks beat automatice scanners by being capable of higher-level th=
ought and able to reason through more insidious bugs
- Vulnerability rewards (bug bounties) turn potential hackers into another =
review layer, finding things that slip through other means
- 0-day research (Project Zero) finds potential bugs in services that Googl=
e and its users use, protecting against companies with less-stringent softw=
are development standards
- Protects against phishing attacks
- Protects against n-day exploits being thrown around in the wild
- Being on the LAN doesn't grant everyone access to everything.  Protects a=
gainst malicious insider as well as malicious people who find their way ins=
ide the trusted boundary
- Follows least-privilige model.  Protects against malicious insider using =
administrative access to view/edit/steal sensitive data
- Even if something happens, Google could have a log of it.  Makes tracing =
and attribution possible after-the-fact.  Acts as a deterrent before-the-fa=
ct
- ML + rules-based monitoring prevents against unauthorized access as well =
as unexpected usage of authorized accesses
 Again following model of least-privilege, Google protects against potentia=
l compromise of KVM executables from causing full compromise of entire syst=
em.

























</pre></li>

<li><pre class=3D"student-text">Table of Contents
_________________

1 secure low level infrastructure
2 secure service deployment
3 secure data storage
4 secure internet communication
5 operational security


1 secure low level infrastructure
=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D=3D=3D=3D=3D=3D=3D

  Prevent adversary from physically breaking in and stealing information
  vendor's use of firmware to gather proprietary information adversary
  exploiting hardware/firmware vulnerabilities to gather propietary
  information


2 secure service deployment
=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D

  adversary using service as client adversary modifying source code
  adversary viewing other services running on same machine adversary as
  service, trying to use api it shouldn't have access to for malicious
  purposes adversary listening to RPC data/traffic adversary using
  service's API (that it should have access to) to access end user data
  it shouldn't have access to


3 secure data storage
=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D

  prevent adversary from directly accessing storage prevent adversary
  from exploiting firmware to access storage


4 secure internet communication
=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D=3D=3D=3D=3D

  adversary attempting dos attack adversary spoofing identity


5 operational security
=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D

  dev code is adversary, unwittingly introducing security
  vulnerabilities with their code devs information stored on
  personal/company devices exploited by adversary employee is adversary
</pre></li>

<li><pre class=3D"student-text">Teresa Lin
tlin15@mit.edu
Lec2 - Attacks that Google is trying to prevent
"Google Infrastructure Security Design Overview"

Secure Low Level Infrastructure:
- Physical security protections (biometric ID, metal detection, cameras, et=
c) protect against physical attacks such as someone walking into a data cen=
ter and destroying/stealing/corrupting the physical machines.
- Custom server boards, chips, and networking equipment (and components vet=
ted from vendors) ensure secure identification and authentication of Google=
's thousands of server machines. This protects against a non-Google device =
trying to connect to the same local network as Google's server machines.
- Cryptographic signatures over low-level components (BIOS, bootloader, ker=
nel, base operating system image) validate the server machines. Together wi=
th the unique identity of each server machine, this allows Google to monito=
r and update all machines' software stacks, detect hardware and software pr=
oblems, and remove machines from service. These measures protect from attac=
ks aimed at weaknesses of older software stacks.

Secure Service Deployment:
- Cryptographic credentials for each service running on the infrastructure =
ensure that no foreign service can make/receive RPCs to other services.
- Code reviews and the fact that code modifications to any system must be a=
pproved by the owners of that system protect from insider attacks on source=
 code.
- Access to services is managed by identities (machine, service, employee) =
that go through approval chains, logging, and notifications. This prevents =
foreign employees, services, and machines to access these services. Some se=
rvices even restrict access to a specific whitelist of services, so in some=
 cases, Google services cannot access other Google services.
- Encryption of RPC data ensures that communication between services cannot=
 be read by outsiders - attacks such as tapping the network will not result=
 in attackers being able to read the inter-service communication.
- "End user permission tickets" are issued by a central user identity servi=
ce to services (e.g. Gmail service) that request information from other Goo=
gle services on behalf of a user. This prevents users from accessing data o=
n other users that are not themselves.=20

Secure Data Storage:
- A central key management service issues keys that encrypt data before bei=
ng written to physical storage. The central key management service rotates =
the keys automatically, ensuring that attackers can't keep trying to decryp=
t the keys to gain access to data.
- Data to be deleted are marked "scheduled for deletion" instead of immedia=
tely deleted so that unintentional deletions can be recovered. This protect=
s against malicious deletions from attackers.

Secure Internet Communication:=20
- Services published externally are registered with the Google Front End (G=
FE) service, which protects against DoS attacks and attacks on the transpor=
t layer.
- Multiple layers of hardware and software load-balancing allow Google to a=
bsorb DoS attacks, effectively protecting against DoS attacks.
- Central identity service authenticates users and then issues cookies/OAut=
h tokens. This authentication service tries to defend against attackers try=
ing to login as other users.

Operational Security:
- Libraries and frameworks for Google developers lower the chances of XSS (=
cross site sculpting) attacks in web applications. Additional automated too=
ls (buzzers, static analysis tools, web security scanners) detect security =
bugs.
- Employees' accounts use U2F-compatible Security Keys which protect agains=
t phishing attacks.
- Employees who are granted administrative access are aggressively monitore=
d, to prevent internal insider attacks. Low level infrastructure hooks log =
employees' access to end user data, and the security team monitors access p=
atterns and investigates unusual events.
- Sophisticated data processing pipelines, combined with 24/7 investigation=
 and response teams, defend against outside intrusion attacks.

Securing the Google Cloud Platform (GCP):
- A Google Cloud Load Balancer service is built on top of the GFE and defen=
ds against DoS attacks.
- Central Cloud IAM service authorizes end users and protects against hijac=
kers.</pre></li>

<li><pre class=3D"student-text">There are many potential attacks that Googl=
e is facing
in different layers,
1. Hardware Infrastructure Layer, malicious attackers may
want to break into Google's data center, destroy the hardware
infrastructure or steal the hard disks.
2. Secure Service Deployment Layer, malicious services may
try to get more information from other services or try to
break other services.
3. User Identity Layer, authentication is highly likely to be
attacked, bad users may act as others or they try to get other
users' information.=20
4. Storage Services Layer, unencrypted raw data may be stolen=20
from the storage. And Google's data may get deleted by accident.
5. Internet Communication Layer, DoS attack is very often.=20
6. Operational Security Layer, insider employees may access
phishing sites and then their devices get hacked. And unsafe
softwares may be installed.=20


</pre></li>

<li><pre class=3D"student-text">Types of security attacks Google is worried=
 about

Security of Physical Premises
    Here, Google is probably worried about people physically going into the=
 datacenters and damaging the servers or tampering with them in some way (p=
erhaps by altering the data, reading the data, inserting viruses, etc).

Hardware Design and Provenance
    Google is worried about hardware vendors selling hardware that contains=
 backdoors or otherwise allows the vendor (or other parties) to access or c=
orrupt the information traveling through disks, network switches, etc.

Secure Boot Stack and Machine Identity
    Google is worried about malignant versions of low-level software like t=
he operating system. If someone installed a version of the OS that containe=
d malware, then it could compromise the security of the machine. Thus, Goog=
le uses cryptographic signatures to make sure all machines have the correct=
 low-level software.

Service Identity, Integrity, and Isolation
    Google is primarly worried about malicious services from attacking othe=
r Google services (and about services containing malicious code in the firs=
t place).=20

Inter-Service Access Management
    This is to prevent a malicious service or Google employee from communic=
ating with a given service. Attacks include an insider (employee) going and=
 modifying application settings or source code, or for an unauthorized app =
to make changes to another service within Google.

Encryption of Inter-Service Communication
    Google is trying to prevent attacks where an adversary attacks the netw=
ork and modifies or reads the data of Google's internal RPC calls. That mig=
ht compromise user data or the application itself.

Access Management of End User Data
    This is meant to prevent attacks where a logged in user may try to pret=
end to be another user and accessing their data (in general any data they d=
on't have permission to access).

Encryption at Rest
    The type of attack this application-level encryption is meant to preven=
t is adversaries directly accessing Google's storage databases, like BigTab=
le. Even if someone gained access to the database, they can't decrypt the a=
pplication data.

Deletion of Data
    Deletion of data is done so that important information that needs to re=
main secret can be destroyed. For example, an attacker may try to recover a=
 confidential file that has been accidentally made public, but then quickly=
 deleted. If the file is actually deleted within the Google databases, then=
 it cannot be recovered by an attacker.

Google Front End Service
    By only exposing a small subset of machines, Google is preventing attac=
ks against its servers (DOS attacks, or just trying to hack the server), si=
nce most of the machines are not accessible via public IP addresses.

Denial of Service (DoS) Protection
    This is to protect against DOS attacks. An attacker may try to overload=
 Google's machines with excess requests; the GFE will detect this and throt=
tle/drop the packets.

User Authentication
    This is to prevent against attacks where the adversary guesses the user=
's password or somehow steals it. That's why Google uses 2-factor authentic=
ation and analyzes device and location usage.

Safe Software Development
    Google tries to prevent attacks where attackers use software bugs (vuln=
erabilities) to gain access to the server.

Keeping Employee Devices and Credentials Safe
    Google tries to prevent attacks where attackers gain access to an emplo=
yee's account or device and access Google's internal servers using the empl=
oyee's credential's, thus compromising the system.

Reducing Insider Risk
    Google prevents an insider (Google employee) from maliciously attacking=
 the servers or stealing user data by monitoring all employee activity with=
 sensitive information (like user data).

Intrusion Detection
    Google tries to prevent secret attacks on the infrastructure by monitor=
ing them carefully at all times, so that any attack is immediately detected=
 and shut down.
















</pre></li>

<li><pre class=3D"student-text">Zach Miller
Computer Security
Lecture 2

List of potential attacks that Google is worried about (by sub-section):

Security of Physical Premises:
-Someone stealing a hard drive from a server.

Hardware Design and Provenance:
-A potential spectre/meltdown style hardware exploit

Secure Boot Stack and Machine Identity:
-Someone booting a copy of an os that has malicious software written into i=
t

Service Identity, Intergration, and Isolation:
-Someone or some piece of software posing as a piece of google software whe=
n it really isn't

Inter-Service Access Management
-Some piece of software has access to data that it shouldn't

Access Managment of End User Data:
-The end user is a hacker who wants to get the data

Secure Data Storage:
-Someone attempts to steal data from an online data storage service

Google Front End Service/Dos Protection:
-DDos attacks

User Authentication:
-Make sure the user logging in isn't a bot

Safe Software Development:
-Buffer overflow attacks

Keeping Employee Devises and Credentials Safe:
-phishing type attacks from google employes to google clients

Reducing Insider Risk:
-A google employee purposely puts in and exploit so they can attack peoples=
 computers

Intrusion Detection:
-An intruder gets into a google building and then can use a google employee=
s computer





</pre></li>

<li><pre class=3D"student-text">google is worried about:
- physical attacks, e.g. someone breaking into their data center, so they h=
ave heavy physical security in place and few employees have access to the d=
ata centers
- low-level exploits, so they use custom hardware and chips to try to avoid=
 this
- data breaches, so their infrastructure isolates processes
- ip spoofing, so they ingress and egress filtering
- tapped networks, so they remove dependency on the security of the network=
 path
- malicious disk firmware, so they use encryption to protect the infastruct=
ure from lower-level threats
- unintentional deletions, so they mark data as "scheduled for deletion" ra=
ther than deleting it immediately
- DoS attacks, so they isolate their infrastructure from the internet into =
a private IP space
- phishing and password cracking, so they offer two factor authorization


</pre></li>

<li><pre class=3D"student-text">lecn.txt

John McLaughlin
jo26061@mit.edu

Lecture 2

As you are reading this paper, think about what attacks Google is trying to=
 prevent with each of the security measures described in this document. Sub=
mit a list of potential attacks that Google is worried about, approximately=
 1 per subsection in the document.


*Secure Low Level Infrastructure
	The following three subsections deal with ensuring that the hardware that =
interacts with Google services and data is secure.

**Security of Physical Premises
	-Intruders breach the premises and steal hard drives with data on them
	-Intruders breach the premises and gain access to computers
	-Intruders breach the premises and destroy data

**Hardware Design and Provenance
	-Supply chain attacks
	-Attackers embed hardware based backdoors on components that will eventual=
ly run Google code

**Secure Boot Stack and Machine Identity
	-Attackers try to add their code within the early boot components of a sys=
tem (Bootkit, Firmware attacks)
	-Attackers replace the hardware that is running Google services


*Secure Service Deployment
	These subsections deal with the authorization and permissions of users and=
 services on Google systems. The security policies here are to give account=
ability and fine grained control of the permissions between services on Goo=
gle's networks.

**Service Identity, Integrity, and Isolation
	-Attackers gain control of a node on the network and want to spread an inf=
ection
	-A third party service is compromised and attempts to access other resourc=
es on the network
	-User-supplied code is used to act maliciously and spread to other resouce=
s on the network
	-Malicious Google engineer adds unauthorized code to Google services (Insi=
der attacks)

**Inter-Service Access Management
	-Attackers utilizing unauthorized acces to services
	-Attribution of specific actions to users and services on the system
=09
**Encryption of Inter-Service Communication
	-Attackers sniffing traffic on the network internally
	-Attackers sniffing or modifying traffic on the wide area network between =
Google services

**Access Management of End User Data
	-Attackers using services that have overly broad permissions to gain unaut=
horized access to data
	-Attackers spoofing or impersonating other end users between services

*Secure Data Storage=20
	These subsections cover the encryption policy of data at rest within Googl=
e. Google heavily relies on application level encryption, deriving more sec=
urtiy from application data being encrypted during all stages of transport =
and storage, rather than waiting for the storage solution managing encrypti=
on.

**Encryption at Rest
	-Attackers recovering discarded hard drives and reading data off of them
	-Attackers modifying or reading the data at rest through malicious hardwar=
e
	-Attackers gaining access to keys in the system linked to specific users

**Deletion of Data
	-Unintentional deletion of data by a user or attacker
	-Unauthorized recovery of deleted data

*Secure Internet Communication
	These subsections deal with how the Google interanl services are presented=
 to users on the external wide area network.

**Google Front End Service
	-Attackers intercepting and/or modifying web traffic to end users (man in =
the middle)
	-Provide single external choke point to prevent attackers from finding sid=
e channels onto internal networks

**Denial of Service (DoS) Protection
	-Attackers sending a large amount of network traffic to overwhelm Google's=
 infrastructure

**User Authentication
	-Attackers brute forcing end user passwords
	-Attackers impersonating an end user, with stolen credentials

*Operational Security
	These subsections deal with the day to day threats of people and systems t=
hat have direct access to critical infrastructure and services

**Safe Software Development
	-Attackers exploiting bugs in software developed at Google to gain access =
to Google systems
	-Attackers exploiting bugs in software developed by third parties (open so=
urce) to gain access to Google systems

**Keeping Employee Devices and Credentials Safe
	-Attackers stealing employee credentials and accessing, modifying, or dest=
roying Google data

**Reducing Insider Risk
	-Employees having access to raw end user data and personally identifiying =
information (PII)
	-Malicious employees accessing, modifying, or destroying Google services i=
n an unauthorized manner.

**Intrusion Detection
	-Malicious software persiting on the network and exfiltrating data

*Securing the Google Cloud Platform (GCP)
	This section discusses concrete examples of all of the previous attacks</p=
re></li>

<li><pre class=3D"student-text">{\rtf1\ansi\ansicpg1252\cocoartf1504\cocoas=
ubrtf830
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\margl1440\margr1440\vieww9800\viewh17520\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\=
tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 Secure Low Level Infrastructure:\
	- Security of Physical Premises: Someone breaking in a Google data center\
 	- Hardware Design and Provenance: Avoid hardware with a potential backdoo=
r\
	- Secure Boot Stack and Machine Identity: Avoid corrupt boot code to be ru=
n.\
Secure Service Deployment:\
	- Service Identity, Integrity, and Isolation: Avoid google employee to mod=
ify source code with malicious intent \
	- Inter-Service Access Management: Unauthorized individual interacting wit=
h code through unauthorized requester service \
	- Encryption of Inter-Service Communication: Disallow eavesdropping \
	- Access Management of End User Data: Even if compromised, data only deliv=
ered to user with valid credentials (ticket)\
Secure Data Storage:\
	- Encryption at Rest: If storage compromised, data read will be junk since=
 encrypted. Compromised by defeating low level safeties \
	- Deletion of Data: If account compromised, attacker tries to delete perso=
nal info. \
Secure Internet Communication:\
	- Google Front End Service: Disallow attacker to take part of a given conn=
ection\
	- DoS Protection: DoS attacks\
	- User Authentication: Disallow attacker with correct password but sketchy=
 credentials (location etc)\
Operational Security:\
	- Safe Software Development: Incentivize people who found vulnerabilities =
to not take advantage of them and instead communicate them to google\
	- Keeping Employee Devices and Credentials Safe: Attacker steals employee =
laptop \
	- Reducing Insider Risk: Employee going rogue\
	- Intrusion Detection: Attacker manages to find vulnerability and tries to=
 take advantage of it\
Securing the Google Cloud Platform: Disallow WAN traffic eavesdropping \
}</pre></li>

<li><pre class=3D"student-text">=EF=BB=BF(in some but not all cases I've qu=
oted parts of the sections as evidence of Google's concern about the mentio=
ned method of attack)
Security of Physical Premises - stealing the hardware itself such as taking=
 hard drives in order to access confidential data

Hardware Design and Provenance - Google uses a custom chip to "identify and=
 authenticate legitimate Google devices" in their datacenters; they may be =
worried about attackers trying to connect to the data center's local networ=
k with another machine to monitor network activity that way

Secure Boot Stack and Machine Identity - attacks that corrupt updates to th=
e OS, etc. en route to the data center; they "use cryptographic signatures =
over low-level components like the BIOS, bootloader, kernel, and base opera=
ting system image [which] can be validated during each boot or update"

Service Identity, Integrity, and Isolation - attackers becoming Google engi=
neers in order to commit malicious code that gives them backdoors into othe=
rs applications

Inter-Service Access Management - non-trusted services accessing your servi=
ce (e.g. if your service provides access to private data); a "service can b=
e configured with the whitelist of the allowed service account identities"

Encryption of Inter-Service Communication - sophisticated adversaries tryin=
g to tap their private WAN links

Access Management of End User Data - other end users trying to access your =
data (e.g. contacts); "a capability for the =E2=80=A6 service to present an=
 'end user permission ticket' =E2=80=A6 [which] proves that the =E2=80=A6 r=
equest [is] on behalf of that =E2=80=A6 user"

Encryption at rest - acquiring used hard drives from Google in the hopes th=
at you can decrypt and access user data; "Before a decommissioned encrypted=
 storage device can physically leave our custody, it is cleaned using a mul=
ti-step process that includes two independent verifications. Devices that d=
o not pass this wiping procedure are physically destroyed (e.g. shredded) o=
n-premises."

Deletion of Data - attackers legitimately gaining access to disk space (e.g=
. through requesting a machine on GCP) then reading old data stored by a pr=
evious user of that disk space

Google Front End Service, Denial of Service (DoS) Protection - denial of se=
rvice attacks=20

User Authentication - attackers logging in as somebody whose username and p=
assword they've stolen; "the service also intelligently challenges users fo=
r additional information based on risk factors such as whether they have lo=
gged in from the same device or a similar location in the past."

Safe Software Development - anybody finding a bug actually exploiting it; "=
we run a Vulnerability Rewards Program where we pay anyone who is able to d=
iscover and inform us of bugs in our infrastructure or applications. We hav=
e paid several million dollars in rewards in this program."

Keeping Employee Devices and Credentials Safe - attackers gaining access to=
 Google services through the computer of an authorized employee

Reducing Insider Risk - Google engineers viewing sensitive information whil=
e debugging services

Intrusion Detection - attackers on Christmas; "incident response teams =E2=
=80=A6 respond to these potential incidents 24 hours a day, 365 days a year=
."</pre></li>

<li><pre class=3D"student-text">=EF=BB=BFPOTENTIAL ATTACKS


Secure Low Level Infrastructure
* Physical attacks on technical infrastructures like data centers
* Illegitimate chips and components entering the low level hardware
* Unverified machines entering the networks


Secure Service Deployment
* Unauthorized or abusive access to the service and data
* Access to services by individuals outside of organizations
* Tapping the network traffic or devices
* End users accessing other users=E2=80=99 data


Secure Data Storage
* Data leaks through malicious disk firmware or decommissioned storage devi=
ces
* Unintended deletion of data


Secure Internet Communication
* DoS (Denial of Service) attacks i.e. flooding the service requests
* Individuals disguised as other users


Operational Security
* Exploitations of bugs in the production software
* Attacks and leaks by insiders like employees


Securing the Google Cloud Platform
* Exploitations of insecurities in the client applications</pre></li>

<li><pre class=3D"student-text">=EF=BB=BFPotential attacks Google is worrie=
d about:
* Someone physically entering data centers and stealing data from there (in=
truder)
* Making sure hardware doesn=E2=80=99t expose Google to hacking attacks fro=
m it (preventing faulty pieces)
* Leaving a hardware or software problem undetected
* People with unverified identities getting into the system and stealing in=
formation
* Associating with a bad service account identity and getting hacked in tha=
t way
* Adversaries getting into private WAN links
* Returning data to end users who should not have it
* Not wiping a device, and then someone bad accesses classified data from i=
t
* Accidentally deleting all of your data
* DoS attacks
* A fake user getting into the system
* Leaving security vulnerabilities=20
* Having an insider who leaves the system exposed or hacks into it himself =
to steal data for personal gain</pre></li>

</ul>


  </div>

</body></html>
------MultipartBoundary--9M9qhJBk7922SllJpAeeJMD8sYhFJGyyFUiuc6T0sd------
